<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>给Git上个代理试试提速</title>
    <url>/2020/05/03/20200503-git-add-proxy/</url>
    <content><![CDATA[<h1 id="给GIT用上代理"><a href="#给GIT用上代理" class="headerlink" title="给GIT用上代理"></a>给GIT用上代理</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在看着教程搭建这个博客的时候，我在GIT上也拖了不少的包。直连有时候真的速度慢到吐血，原因很复杂也莫得办法。<br>不过还好，我们其实可以给GIT上个代理，这样能给速度一些改善。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>我是在本机器安装有代理客户端，小🛩和V2都彳亍。<br>我这边的情况是这样的，小飞机走SOCK5代理，V2走的HTTP代理。<br>因为平时我只可能开着一个，所以端口都是1080。</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>废话不多说了，直接上命令。</p>
<p>首先我们看看已有的设置.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 查看全局配置中的代理</span></span><br><span class="line">git config --global --get http.proxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前生效配置中的代理</span></span><br><span class="line">git config --get http.proxy</span><br></pre></td></tr></table></figure>
<p>然后我们加上自己的代理。<br>当前我们假设的状态是本机开着小✈或者V2，且代理端口为1080的情况。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 括号中的都是可选项</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若用的小飞机, --global 意味着应用到全局设置</span></span><br><span class="line">git config (--global) http.proxy sock5://127.0.0.1:1080</span><br><span class="line">git config (--global) https.proxy sock5://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样应用后，没开代理GIT就会抽风了，所以如果平时速度还不错的话记得用完取消代理</span></span><br><span class="line">git config (--global) --<span class="built_in">unset</span> http.proxy (sock5://127.0.0.1:1080)</span><br><span class="line">git config (--global) --<span class="built_in">unset</span> https.proxy (sock5://127.0.0.1:1080)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若用的V2, --global 意味着应用到全局设置</span></span><br><span class="line">git config (--global) http.proxy  http://127.0.0.1:1080</span><br><span class="line">git config (--global) https.proxy https://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消</span></span><br><span class="line">git config (--global) --<span class="built_in">unset</span> http.proxy  （http://127.0.0.1:1080）</span><br><span class="line">git config (--global) --<span class="built_in">unset</span> https.proxy （https://127.0.0.1:1080）</span><br></pre></td></tr></table></figure>
<p>挂了代理真的飞速，爽到。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>给Unity上代理</title>
    <url>/2020/05/18/20200518-unity-hub-w-proxy/</url>
    <content><![CDATA[<h1 id="给Unity用上代理"><a href="#给Unity用上代理" class="headerlink" title="给Unity用上代理"></a>给Unity用上代理</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前有段时间公司的网络不是很稳定，从UnityHub上拖东西99%失败。自己又太菜不想安装Android Studio手动设置安卓打包的东西，于是乎只能想办法给下载加速。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先你要有那个，就是那个你为了看PH才弄的小工具：）</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>首先默认我们的小✈代理端口是1080。<br>似乎V2可以同时有SOCK5和HTTP代理的样子，那也把HTTP代理的端口设置成1080.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line"><span class="built_in">set</span> HTTP_PROXY=http://127.0.0.1:1080</span><br><span class="line"><span class="built_in">set</span> HTTPS_PROXY=http://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line">start <span class="string">""</span> <span class="string">"your unity hub path"</span></span><br><span class="line"><span class="comment"># like path is like -&gt; D:\Unity\Unity Hub\Unity Hub.exe</span></span><br></pre></td></tr></table></figure>
<h2 id="爆炸"><a href="#爆炸" class="headerlink" title="爆炸"></a>爆炸</h2><p>非常简单就是这样。</p>
<p>其实东西都是从有木桑博客看来的<br><a href="https://www.yomunchan.moe/archives/320" target="_blank" rel="noopener">https://www.yomunchan.moe/archives/320</a></p>
<p>这边有蛮多游戏开发相关的文章，帮了我不少，十分感谢了。</p>
]]></content>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>摸一个简单的 Unity Log Console (1)</title>
    <url>/2020/05/31/20200531-CloneUnityConsole1/</url>
    <content><![CDATA[<p>本菜狗在上周领了一个做LogManager的任务。很高兴也很慌，毕竟从来没做过编辑器开发，于是面向搜索引擎编程开始辣，找了一些教程学着做，顺便分享一下。</p>
<h1 id="需求分析（？"><a href="#需求分析（？" class="headerlink" title="需求分析（？"></a>需求分析（？</h1><p>组里对这个LogManager的要求是在Unity原来的Log功能上再加上根据标签和危险度(?)来筛选。<br>仔细想想还挺麻烦。需要筛选的话，那自然需要一个Console面板，似乎Unity原本的Console不方便扩展，索性跟着网上的教程重新做一个。</p>
<h1 id="弹出窗口"><a href="#弹出窗口" class="headerlink" title="弹出窗口"></a>弹出窗口</h1><p>首先我们先把窗口弹出来。代码很简单。</p>
<p>我们可以从Unity头顶的菜单栏中的Window中找到这个面板并打开。打开了是空白的，当然啦，因为还什么都没画上去。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TempConsoleWindow</span> : <span class="title">EditorWindow</span></span><br><span class="line">&#123;</span><br><span class="line">	[<span class="meta">MenuItem(<span class="meta-string">"Window/Temp Console"</span>)</span>]</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OpenWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		TempConsoleWindow window = GetWindow&lt;TempConsoleWindow&gt;();</span><br><span class="line">		GUIContent titleContent = <span class="keyword">new</span> GUIContent(<span class="string">"TempConsole"</span>, EditorGUIUtility.Load(<span class="string">"icons/UnityEditor.ConsoleWindow.png"</span>) <span class="keyword">as</span> Texture2D, <span class="string">"a clone sonsole"</span>);</span><br><span class="line">		window.titleContent = titleContent;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="分割区块"><a href="#分割区块" class="headerlink" title="分割区块"></a>分割区块</h1><img src="/2020/05/31/20200531-CloneUnityConsole1/20200531-Unity01.png" class="" title="split">
<p>我们把原本的面板分成4块：1.菜单栏；2. Log区；3. 调整棒(上下移动调整区域大小)；4. 详情区。于是乎我们给这个4个区创建响应的变量为了方便绘制。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Rect m_menuUpperBar = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">private</span> Rect m_upperPanel = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">private</span> Rect m_lowerPanel = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">private</span> Rect m_resizer = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">float</span> MENU_BAR_HEIGHT = <span class="number">20.0f</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> m_upperSizeRatio = <span class="number">0.5f</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">float</span> RESIZER_HEIGHT = <span class="number">4.0f</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> PanelGroupHeight =&gt; position.height - MENU_BAR_HEIGHT;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">bool</span> m_isResizing = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<h1 id="偷皮"><a href="#偷皮" class="headerlink" title="偷皮"></a>偷皮</h1><p>Unity的绘制GUI方法中可以填写风格参数，我们绘制四个区块的时候自然也需要为区块准备皮和文字颜色。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// log区风格以及log区的标题风格</span></span><br><span class="line"><span class="keyword">private</span> GUIStyle m_panelLabelStyle = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">private</span> GUIStyle m_panelStyle = <span class="keyword">default</span>;</span><br><span class="line"><span class="comment">// 调整棒儿的风格</span></span><br><span class="line"><span class="keyword">private</span> GUIStyle m_resizerStyle = <span class="keyword">default</span>;</span><br><span class="line"><span class="comment">// box item 其实是在log区显示的每一个log item</span></span><br><span class="line"><span class="keyword">private</span> GUIStyle m_boxItemStyle = <span class="keyword">default</span>;</span><br><span class="line"><span class="comment">// 这是 log详情的文字风格</span></span><br><span class="line"><span class="keyword">private</span> GUIStyle m_textAreaStyle = <span class="keyword">default</span>;</span><br><span class="line"><span class="comment">// 这是一个无边框的按钮风格，为代码跳转准备</span></span><br><span class="line"><span class="keyword">private</span> GUIStyle m_labelButtonStyle = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各种图标</span></span><br><span class="line"><span class="keyword">private</span> Texture2D m_infoIcon = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> Texture2D m_infoIconSmall = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> Texture2D m_warningIcon = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> Texture2D m_warningIconSmall = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> Texture2D m_errorIcon = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> Texture2D m_errorIconSmall = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Texture2D m_boxBgOdd = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> Texture2D m_boxBgEven = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> Texture2D m_boxBgSelected = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> Texture2D m_boxIcon = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取各种皮</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">GetAssets</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_panelLabelStyle = <span class="keyword">new</span> GUIStyle();</span><br><span class="line">    m_panelLabelStyle.fixedHeight = <span class="number">30.0f</span>;</span><br><span class="line">    m_panelLabelStyle.richText = <span class="literal">true</span>;</span><br><span class="line">    m_panelLabelStyle.normal.textColor = Color.white;</span><br><span class="line">    m_panelLabelStyle.fontSize = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    m_infoIcon = EditorGUIUtility.Load(<span class="string">"icons/console.infoicon.png"</span>) <span class="keyword">as</span> Texture2D;</span><br><span class="line">    m_infoIconSmall = EditorGUIUtility.Load(<span class="string">"icons/console.infoicon.sml.png"</span>) <span class="keyword">as</span> Texture2D;</span><br><span class="line">    m_warningIcon = EditorGUIUtility.Load(<span class="string">"icons/console.warnicon.png"</span>) <span class="keyword">as</span> Texture2D;</span><br><span class="line">    m_warningIconSmall = EditorGUIUtility.Load(<span class="string">"icons/console.warnicon.sml.png"</span>) <span class="keyword">as</span> Texture2D;</span><br><span class="line">    m_errorIcon = EditorGUIUtility.Load(<span class="string">"icons/console.erroricon.png"</span>) <span class="keyword">as</span> Texture2D;</span><br><span class="line">    m_errorIconSmall = EditorGUIUtility.Load(<span class="string">"icons/console.erroricon.sml.png"</span>) <span class="keyword">as</span> Texture2D;</span><br><span class="line"></span><br><span class="line">    m_resizerStyle = <span class="keyword">new</span> GUIStyle();</span><br><span class="line"></span><br><span class="line">    m_panelStyle = <span class="keyword">new</span> GUIStyle();</span><br><span class="line">    m_panelStyle.normal.background = EditorGUIUtility.Load(<span class="string">"builtin skins/darkskin/images/projectbrowsericonareabg.png"</span>) <span class="keyword">as</span> Texture2D;</span><br><span class="line">    <span class="comment">// 这行是同事告诉我的，但是不知道为什么不管用，直接用会有空引用报错，要在GUI里用</span></span><br><span class="line">    <span class="comment">// m_panelStyle.normal.background = GUI.skin.window.normal.background; </span></span><br><span class="line"></span><br><span class="line">    m_boxItemStyle = <span class="keyword">new</span> GUIStyle();</span><br><span class="line">    m_boxItemStyle.normal.textColor = <span class="keyword">new</span> Color(<span class="number">0.7f</span>, <span class="number">0.7f</span>, <span class="number">0.7f</span>);</span><br><span class="line"></span><br><span class="line">    m_boxBgOdd = EditorGUIUtility.Load(<span class="string">"builtin skins/darkskin/images/cn entrybackodd.png"</span>) <span class="keyword">as</span> Texture2D;</span><br><span class="line">    m_boxBgEven = EditorGUIUtility.Load(<span class="string">"builtin skins/darkskin/images/cnentrybackeven.png"</span>) <span class="keyword">as</span> Texture2D;</span><br><span class="line">    m_boxBgSelected = EditorGUIUtility.Load(<span class="string">"builtin skins/darkskin/images/menuitemhover.png"</span>) <span class="keyword">as</span> Texture2D;</span><br><span class="line"></span><br><span class="line">    m_textAreaStyle = <span class="keyword">new</span> GUIStyle();</span><br><span class="line">    m_textAreaStyle.normal.textColor = <span class="keyword">new</span> Color(<span class="number">0.9f</span>, <span class="number">0.9f</span>, <span class="number">0.9f</span>);</span><br><span class="line">    m_textAreaStyle.normal.background = EditorGUIUtility.Load(<span class="string">"builtin skins/darkskin/images/projectbrowsericonareabg.png"</span>) <span class="keyword">as</span> Texture2D;</span><br><span class="line"></span><br><span class="line">    m_labelButtonStyle = <span class="keyword">new</span> GUIStyle();</span><br><span class="line">    m_labelButtonStyle.normal.textColor = Color.green;</span><br><span class="line">    m_labelButtonStyle.normal.background = m_textAreaStyle.normal.background;</span><br><span class="line">    m_labelButtonStyle.alignment = TextAnchor.MiddleLeft;</span><br><span class="line">    m_labelButtonStyle.stretchWidth = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> b = m_labelButtonStyle.border;</span><br><span class="line">    b.left = <span class="number">0</span>;</span><br><span class="line">    b.right = <span class="number">0</span>;</span><br><span class="line">    b.top = <span class="number">0</span>;</span><br><span class="line">    b.bottom = <span class="number">0</span>;</span><br><span class="line">    m_labelButtonStyle.border = b;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GetAssets();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取图像的参数都是magic number，这里不多提。图标浏览和获取参数可以参考下面两个页面。当然你也可以准备自己的素材。</p>
<p><a href="https://unitylist.com/p/5c3/Unity-editor-icons" target="_blank" rel="noopener">https://unitylist.com/p/5c3/Unity-editor-icons</a><br><a href="https://gist.github.com/rus89/375e107ed8c6db79d0c41b8612e5dbf3" target="_blank" rel="noopener">https://gist.github.com/rus89/375e107ed8c6db79d0c41b8612e5dbf3</a></p>
<h1 id="绘制菜单栏"><a href="#绘制菜单栏" class="headerlink" title="绘制菜单栏"></a>绘制菜单栏</h1><p>菜单栏上有几个按钮，我们把最常用的如清理，Play开始清除以及右边三个Filter选项。除了’Clear’是Button，其它的都是Toggle。所以得准备一些布尔变量。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">bool</span> m_isClearOnPlay = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">bool</span> m_isClearOnBuild = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">bool</span> IsClearOnBuild =&gt; m_isClearOnBuild;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">bool</span> m_isErrorPause = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">bool</span> m_isShowLog = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">bool</span> m_isShowWarning = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">bool</span> m_isShowError = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> m_normalLogCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> m_warningLogCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> m_errorLogCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> HashSet&lt;LogType&gt; m_logTypeForUnshow = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<p>准备好了，那么就可以开始绘制菜单栏了。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawMenuUpperBar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_menuUpperBar = <span class="keyword">new</span> Rect(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="keyword">this</span>.position.width, MENU_BAR_HEIGHT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始绘制</span></span><br><span class="line">    GUILayout.BeginArea(m_menuUpperBar, EditorStyles.toolbar);</span><br><span class="line">    <span class="comment">// 横向绘制！！！</span></span><br><span class="line">    GUILayout.BeginHorizontal();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (GUILayout.Button(<span class="keyword">new</span> GUIContent(<span class="string">"Clear"</span>), EditorStyles.toolbarButton, GUILayout.Width(<span class="number">40.0f</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 用于清空所有的 log</span></span><br><span class="line">        ClearLogs();</span><br><span class="line">    &#125;</span><br><span class="line">    GUILayout.Space(<span class="number">5.0f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// m_isCollapse = GUILayout.Toggle(m_isCollapse, new GUIContent("Collapse"), EditorStyles.toolbarButton, GUILayout.Width(55.0f));</span></span><br><span class="line">    m_isClearOnPlay = GUILayout.Toggle(m_isClearOnPlay, <span class="keyword">new</span> GUIContent(<span class="string">"Clear On Play"</span>), EditorStyles.toolbarButton, GUILayout.Width(<span class="number">80.0f</span>));</span><br><span class="line">    m_isClearOnBuild = GUILayout.Toggle(m_isClearOnBuild, <span class="keyword">new</span> GUIContent(<span class="string">"Clear On Build"</span>), EditorStyles.toolbarButton, GUILayout.Width(<span class="number">85.0f</span>));</span><br><span class="line">    m_isErrorPause = GUILayout.Toggle(m_isErrorPause, <span class="keyword">new</span> GUIContent(<span class="string">"Error Pause"</span>), EditorStyles.toolbarButton, GUILayout.Width(<span class="number">70.0f</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弹性空白，我不太清楚应该怎么描述，但是它可以把后面的几个Toggle都尽可能往后面推</span></span><br><span class="line">    GUILayout.FlexibleSpace();</span><br><span class="line"></span><br><span class="line">    m_normalLogCount = Mathf.Clamp(m_normalLogCount, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    m_warningLogCount = Mathf.Clamp(m_warningLogCount, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    m_errorLogCount = Mathf.Clamp(m_errorLogCount, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">    m_isShowLog = GUILayout.Toggle(m_isShowLog, <span class="keyword">new</span> GUIContent(m_numStrs[m_normalLogCount], m_infoIconSmall), EditorStyles.toolbarButton, GUILayout.Width(<span class="number">30.0f</span>));</span><br><span class="line">    m_isShowWarning = GUILayout.Toggle(m_isShowWarning, <span class="keyword">new</span> GUIContent(m_numStrs[m_warningLogCount], m_warningIconSmall), EditorStyles.toolbarButton, GUILayout.Width(<span class="number">30.0f</span>));</span><br><span class="line">    m_isShowError = GUILayout.Toggle(m_isShowError, <span class="keyword">new</span> GUIContent(m_numStrs[m_errorLogCount], m_errorIconSmall), EditorStyles.toolbarButton, GUILayout.Width(<span class="number">30.0f</span>));</span><br><span class="line"></span><br><span class="line">    m_logTypeForUnshow.Clear();</span><br><span class="line">    <span class="keyword">if</span> (!m_isShowLog)</span><br><span class="line">    &#123;</span><br><span class="line">        m_logTypeForUnshow.Add(LogType.Log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!m_isShowWarning)</span><br><span class="line">    &#123;</span><br><span class="line">        m_logTypeForUnshow.Add(LogType.Warning);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!m_isShowError)</span><br><span class="line">    &#123;</span><br><span class="line">        m_logTypeForUnshow.Add(LogType.Error);</span><br><span class="line">        m_logTypeForUnshow.Add(LogType.Assert);</span><br><span class="line">        m_logTypeForUnshow.Add(LogType.Exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 横向绘制结束</span></span><br><span class="line">    GUILayout.EndHorizontal();</span><br><span class="line">    <span class="comment">// 区域绘制结束</span></span><br><span class="line">    GUILayout.EndArea();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际调用绘制</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DrawMenuUpperBar();</span><br><span class="line">    <span class="comment">//DrawUpperPanel();</span></span><br><span class="line">    <span class="comment">//DrawLowerPanel();</span></span><br><span class="line">    <span class="comment">//DrawResizer();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就把菜单栏绘制好了。</p>
<h1 id="简单绘制上下区栏"><a href="#简单绘制上下区栏" class="headerlink" title="简单绘制上下区栏"></a>简单绘制上下区栏</h1><p>接下来再绘制调整棒之前先简单绘制上下区，待会儿做好调整棒之后就能直接测试效果。要注意给菜单栏以及调整版预留的高度，不然会得到错误的区域大小，添加调整棒后会更会出现奇怪现象。<br>现在只需要给上下区绘制空白就可以了。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawUpperPanel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_upperPanel = <span class="keyword">new</span> Rect(<span class="number">0</span>, MENU_BAR_HEIGHT, <span class="keyword">this</span>.position.width, (<span class="keyword">this</span>.position.height - MENU_BAR_HEIGHT) * m_upperSizeRatio);</span><br><span class="line">    GUILayout.BeginArea(m_upperPanel, m_panelStyle);</span><br><span class="line">    GUILayout.Label(<span class="string">"Log"</span>, m_panelLabelStyle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了画log item而准备的 ScrollView</span></span><br><span class="line">    m_upperPanelScroll = GUILayout.BeginScrollView(m_upperPanelScroll);</span><br><span class="line">    GUILayout.EndScrollView();</span><br><span class="line"></span><br><span class="line">    GUILayout.EndArea();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawLowerPanel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> yPos = PanelGroupHeight * m_upperSizeRatio + MENU_BAR_HEIGHT + RESIZER_HEIGHT;</span><br><span class="line">    m_lowerPanel = <span class="keyword">new</span> Rect(<span class="number">0</span>, yPos, <span class="keyword">this</span>.position.width, PanelGroupHeight * (<span class="number">1.0f</span> - m_upperSizeRatio));</span><br><span class="line">    GUILayout.BeginArea(m_lowerPanel, m_panelStyle);</span><br><span class="line">    GUILayout.Label(<span class="string">"Log Detail"</span>, m_panelLabelStyle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为 log详情准备的 ScrollView</span></span><br><span class="line">    m_lowerPanelScroll = GUILayout.BeginScrollView(m_lowerPanelScroll);</span><br><span class="line">    GUILayout.EndScrollView();</span><br><span class="line"></span><br><span class="line">    GUILayout.EndArea();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际调用绘制</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DrawMenuUpperBar();</span><br><span class="line">    DrawUpperPanel();</span><br><span class="line">    DrawLowerPanel();</span><br><span class="line">    <span class="comment">//DrawResizer();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="绘制调整棒-添加区域调整"><a href="#绘制调整棒-添加区域调整" class="headerlink" title="绘制调整棒 添加区域调整"></a>绘制调整棒 添加区域调整</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawResizer</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> yPos = (<span class="keyword">this</span>.position.height - MENU_BAR_HEIGHT) * m_upperSizeRatio + MENU_BAR_HEIGHT;</span><br><span class="line">    m_resizer = <span class="keyword">new</span> Rect(<span class="number">0</span>, yPos, <span class="keyword">this</span>.position.width, RESIZER_HEIGHT);</span><br><span class="line"></span><br><span class="line">    GUILayout.BeginArea(<span class="keyword">new</span> Rect(m_resizer.position + (Vector2.up * RESIZER_HEIGHT), <span class="keyword">new</span> Vector2(<span class="keyword">this</span>.position.width, <span class="number">2.0f</span>)), m_resizerStyle);</span><br><span class="line">    GUILayout.EndArea();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把 m_resizer 区域内的光标换成拉伸指示光标</span></span><br><span class="line">    EditorGUIUtility.AddCursorRect(m_resizer, MouseCursor.ResizeVertical);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Resize</span>(<span class="params">Event currentEvent</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_isResizing)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 通过鼠标位置改变调整棒位置</span></span><br><span class="line">        <span class="keyword">float</span> pos = currentEvent.mousePosition.y - MENU_BAR_HEIGHT;</span><br><span class="line"></span><br><span class="line">        m_upperSizeRatio = pos / PanelGroupHeight;</span><br><span class="line">        m_upperSizeRatio = Mathf.Clamp(m_upperSizeRatio, <span class="number">0.5f</span>, <span class="number">0.8f</span>);</span><br><span class="line">        <span class="comment">//Debug.Log($"next upper ratio &#123;m_upperSizeRatio&#125;");</span></span><br><span class="line">        Repaint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProcessEvents</span>(<span class="params">Event currentEvent</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (EventType.MouseDown == currentEvent.type)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// if press mouse left in resizer</span></span><br><span class="line">        m_isResizing = (<span class="number">0</span> == currentEvent.button &amp;&amp; m_resizer.Contains(currentEvent.mousePosition));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (EventType.MouseUp == currentEvent.type)</span><br><span class="line">    &#123;</span><br><span class="line">        m_isResizing = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Resize(currentEvent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实感觉编辑器开发挺麻烦的，除了区域绘制要注意，还有一堆API不好查不会用。下一期将会将Log信息捕获并显示在我们自己的这个Console上。</p>
<hr>
<p>完整工程链接(持续更新中) :<br><a href="https://github.com/2C2C2C/TempUnityLogConsoleClone" target="_blank" rel="noopener">https://github.com/2C2C2C/TempUnityLogConsoleClone</a></p>
<p>P.S : 我在做的时候是参考了某个游戏工作室发布的教程，我也顺便把这个教程分享出来。<br><a href="https://gram.gs/gramlog/creating-editor-windows-in-unity/" target="_blank" rel="noopener">https://gram.gs/gramlog/creating-editor-windows-in-unity/</a></p>
]]></content>
      <categories>
        <category>UnityEditor</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UnityEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>摸一个简单的 Unity Log Console (2)</title>
    <url>/2020/05/31/20200531-CloneUnityConsole2/</url>
    <content><![CDATA[<p>上一期我们做完了基本的面板绘制，现在我们可以往里面添加简单的内容了。</p>
<h1 id="定义显示单位"><a href="#定义显示单位" class="headerlink" title="定义显示单位"></a>定义显示单位</h1><p>既然我们要显示Log，那就定义一些数据结构用于存储这些Log。因为这些东西在我们的console中只需要显示就行了，我们只需要定义只读的数据就可以，或许还能提高性能。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LogItem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsSelected &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">string</span> LogInfo = <span class="keyword">string</span>.Empty; <span class="comment">// Log简要信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">string</span> LogMessage = <span class="keyword">string</span>.Empty; <span class="comment">// Log 调用栈！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> LogType GetLogType = LogType.Log;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogItem</span>(<span class="params"><span class="keyword">bool</span> isSelected, <span class="keyword">string</span> info, <span class="keyword">string</span> message, LogType type</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        IsSelected = isSelected;</span><br><span class="line">        <span class="comment">// 记得加上时间！！！</span></span><br><span class="line">        LogInfo = <span class="keyword">string</span>.Format(<span class="string">"[&#123;0&#125;] &#123;1&#125;"</span>, System.DateTime.Now.ToLongTimeString(), info);</span><br><span class="line">        LogMessage = message;</span><br><span class="line">        GetLogType = type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TempConsoleWindow</span> : <span class="title">EditorWindow</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LogMessageReceived</span>(<span class="params"><span class="keyword">string</span> condition, <span class="keyword">string</span> stackTrace, LogType type</span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">            LogItem log = <span class="keyword">new</span> LogItem(<span class="literal">false</span>, condition, stackTrace, type);</span><br><span class="line">            m_logItems.Add(log);</span><br><span class="line">            <span class="keyword">switch</span> (type)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> LogType.Error:</span><br><span class="line">                    m_errorLogCount++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> LogType.Assert:</span><br><span class="line">                    m_errorLogCount++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> LogType.Warning:</span><br><span class="line">                    m_warningLogCount++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> LogType.Log:</span><br><span class="line">                    m_normalLogCount++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> LogType.Exception:</span><br><span class="line">                    m_errorLogCount++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    m_errorLogCount++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 主动刷新，因为当此窗口没有焦点时似乎无法走 OnGUI() 刷新。</span></span><br><span class="line">            Repaint();</span><br><span class="line">            <span class="comment">//GUI.changed = true;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="comment">// ....</span></span><br><span class="line">		<span class="comment">// 监听此事件，当Debug.Log("")被调用的时候就会响应</span></span><br><span class="line">		Application.logMessageReceived += LogMessageReceived;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>	&#123;</span><br><span class="line">		<span class="comment">// ....</span></span><br><span class="line">		Application.logMessageReceived -= LogMessageReceived;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="在上部面板显示Log"><a href="#在上部面板显示Log" class="headerlink" title="在上部面板显示Log"></a>在上部面板显示Log</h1><p>像原本Unity Console一样，每一条Log以一个方条item的形式显示在上半部分面板。<br>我们先把这个item画出来。<br>m_selectedLogItem 是我们选中的 LogItem。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">bool</span> <span class="title">DrawLogBox</span>(<span class="params"><span class="keyword">in</span> <span class="keyword">string</span> content, LogType logType, <span class="keyword">bool</span> isOdd, <span class="keyword">bool</span> isSelected</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isSelected)</span><br><span class="line">    &#123;</span><br><span class="line">        m_boxItemStyle.normal.background = m_boxBgSelected;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (isOdd)</span><br><span class="line">        &#123;</span><br><span class="line">            m_boxItemStyle.normal.background = m_boxBgOdd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_boxItemStyle.normal.background = m_boxBgEven;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (logType)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> LogType.Error:</span><br><span class="line">            m_boxIcon = m_errorIcon;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LogType.Assert:</span><br><span class="line">            m_boxIcon = m_errorIcon;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LogType.Warning:</span><br><span class="line">            m_boxIcon = m_warningIcon;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LogType.Log:</span><br><span class="line">            m_boxIcon = m_infoIcon;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LogType.Exception:</span><br><span class="line">            m_boxIcon = m_errorIcon;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这个按钮是因为这条box item是可以被点击选择的！！！</span></span><br><span class="line">    <span class="keyword">return</span> GUILayout.Button(<span class="keyword">new</span> GUIContent(content, m_boxIcon), m_boxItemStyle, GUILayout.ExpandWidth(<span class="literal">true</span>), GUILayout.Height(<span class="number">30.0f</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawUpperPanel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_upperPanel = <span class="keyword">new</span> Rect(<span class="number">0</span>, MENU_BAR_HEIGHT, <span class="keyword">this</span>.position.width, (<span class="keyword">this</span>.position.height - MENU_BAR_HEIGHT) * m_upperSizeRatio);</span><br><span class="line">    GUILayout.BeginArea(m_upperPanel, m_panelStyle);</span><br><span class="line">    GUILayout.Label(<span class="string">"Log"</span>, m_panelLabelStyle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在scrollview里填充log，unity</span></span><br><span class="line">    m_upperPanelScroll = GUILayout.BeginScrollView(m_upperPanelScroll);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_logItems.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_logTypeForUnshow.Contains(m_logItems[i].GetLogType))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 画的时候，顺便接受item的点击的结果</span></span><br><span class="line">        <span class="keyword">if</span> (DrawLogBox(m_logItems[i].LogInfo, m_logItems[i].GetLogType, i % <span class="number">2</span> == <span class="number">0</span>, m_logItems[i].IsSelected))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != m_selectedLogItem)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (m_logItems[i] == m_selectedLogItem)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// click a some one, open code</span></span><br><span class="line">                    <span class="comment">// JumpToCurrentLogPos(); // 跳转到你点击的Log的顶部的代码文件（如果可以</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    m_selectedLogItem.IsSelected = <span class="literal">false</span>;</span><br><span class="line">                    m_selectedLogItem = m_logItems[i];</span><br><span class="line">                    m_selectedLogItem.IsSelected = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                m_selectedLogItem = m_logItems[i];</span><br><span class="line">                m_selectedLogItem.IsSelected = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 准备刷新</span></span><br><span class="line">            GUI.changed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    GUILayout.EndScrollView();</span><br><span class="line">    GUILayout.EndArea();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">    <span class="keyword">if</span> (GUI.changed)</span><br><span class="line">    &#123;</span><br><span class="line">        Repaint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="显示Log详情以及调用栈"><a href="#显示Log详情以及调用栈" class="headerlink" title="显示Log详情以及调用栈"></a>显示Log详情以及调用栈</h1><p>由于我脑子不好使，我不知道如何完美复刻Unity Console的详情，Unity自带Console中显示的代码链接既可以复制也可以点击跳转，我只做了简单的跳转。如果有比较熟悉编辑器开发的朋友，可以提供修改的方法。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawLowerPanel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> yPos = PanelGroupHeight * m_upperSizeRatio + MENU_BAR_HEIGHT + RESIZER_HEIGHT;</span><br><span class="line">    m_lowerPanel = <span class="keyword">new</span> Rect(<span class="number">0</span>, yPos, <span class="keyword">this</span>.position.width, PanelGroupHeight * (<span class="number">1.0f</span> - m_upperSizeRatio));</span><br><span class="line">    GUILayout.BeginArea(m_lowerPanel, m_panelStyle);</span><br><span class="line">    GUILayout.Label(<span class="string">"Log Detail"</span>, m_panelLabelStyle);</span><br><span class="line"></span><br><span class="line">    m_lowerPanelScroll = GUILayout.BeginScrollView(m_lowerPanelScroll);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span> logDetail = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">string</span>[] logDetailMutiLine = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO : code clean here</span></span><br><span class="line">    <span class="keyword">string</span> pathline = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">string</span> tempCase = <span class="string">".cs:"</span>;</span><br><span class="line">    <span class="keyword">string</span> path = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="keyword">int</span> line = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> splitwa = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != m_selectedLogItem)</span><br><span class="line">    &#123;</span><br><span class="line">        logDetail = m_selectedLogItem.LogMessage;</span><br><span class="line">        GUILayout.TextArea(<span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;\n"</span>, m_selectedLogItem.LogInfo), m_textAreaStyle);</span><br><span class="line"></span><br><span class="line">        logDetailMutiLine = logDetail.Split(<span class="string">'\n'</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; logDetailMutiLine.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Regex match 'at xxx'</span></span><br><span class="line">            Match matches = Regex.Match(logDetailMutiLine[i], <span class="string">@"\(at (.+)\)"</span>, RegexOptions.Multiline);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (matches.Success)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (matches.Success)</span><br><span class="line">                &#123;</span><br><span class="line">                    pathline = matches.Groups[<span class="number">1</span>].Value;</span><br><span class="line">                    <span class="keyword">if</span> (pathline.Contains(tempCase))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">int</span> splitIndex = pathline.LastIndexOf(<span class="string">":"</span>);</span><br><span class="line">                        path = pathline.Substring(<span class="number">0</span>, splitIndex);</span><br><span class="line">                        line = Convert.ToInt32(pathline.Substring(splitIndex + <span class="number">1</span>));</span><br><span class="line">                        <span class="keyword">string</span> fullpath = Application.dataPath.Substring(<span class="number">0</span>, Application.dataPath.LastIndexOf(<span class="string">"Assets"</span>));</span><br><span class="line">                        fullpath = fullpath + path;</span><br><span class="line">                        splitwa = logDetailMutiLine[i].LastIndexOf(<span class="string">"("</span>);</span><br><span class="line">                        logDetailMutiLine[i] = logDetailMutiLine[i].Substring(<span class="number">0</span>, splitwa);</span><br><span class="line"></span><br><span class="line">                        GUILayout.BeginHorizontal();</span><br><span class="line">                        GUILayout.TextArea(<span class="keyword">string</span>.Format(<span class="string">" (at : &#123;0&#125;)\n"</span>, logDetailMutiLine[i]), m_textAreaStyle);</span><br><span class="line">                        <span class="keyword">if</span> (GUILayout.Button(<span class="keyword">string</span>.Format(<span class="string">" ( &#123;0&#125; )\n"</span>, pathline), m_labelButtonStyle))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// 打开文件的魔法</span></span><br><span class="line">                            UnityEditorInternal.InternalEditorUtility.OpenFileAtLineExternal(fullpath.Replace(<span class="string">'/'</span>, <span class="string">'\\'</span>), line);</span><br><span class="line">                        &#125;</span><br><span class="line">                        GUILayout.FlexibleSpace();</span><br><span class="line">                        GUILayout.EndHorizontal();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                GUILayout.TextArea(logDetailMutiLine[i], m_textAreaStyle);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    GUILayout.EndScrollView();</span><br><span class="line">    GUILayout.EndArea();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这边用了正则表达式去匹配去寻找代码文件，是从网上查到的，我用着还不太熟练。所以写得很乱，后续会在工程中更新干净些的版本。</p>
<h1 id="完善菜单栏功能"><a href="#完善菜单栏功能" class="headerlink" title="完善菜单栏功能"></a>完善菜单栏功能</h1><p>既然我们能显示Log了，那就别忘了补上清除Log的功能。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClearLogs</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != m_selectedLogItem)</span><br><span class="line">    &#123;</span><br><span class="line">        m_selectedLogItem.IsSelected = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_selectedLogItem = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    m_normalLogCount = <span class="number">0</span>;</span><br><span class="line">    m_warningLogCount = <span class="number">0</span>;</span><br><span class="line">    m_errorLogCount = <span class="number">0</span>;</span><br><span class="line">    m_logItems.Clear();</span><br><span class="line">    GUI.changed = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawMenuUpperBar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">    <span class="keyword">if</span> (GUILayout.Button(<span class="keyword">new</span> GUIContent(<span class="string">"Clear"</span>), EditorStyles.toolbarButton, GUILayout.Width(<span class="number">40.0f</span>)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 用于清空所有的 log</span></span><br><span class="line">        ClearLogs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这一期就到这里。感觉工具开发也有点搬砖，但是会用到各种各样的搬砖工具去搬运契合不同的砖，能接触到很多东西，还蛮有趣的。<br>下一期我会尝试把当前这个乞丐Log Console的功能都补齐。<br>代码有缺漏可以先参考工程。</p>
<hr>
<p>完整工程链接</p>
<p><a href="https://github.com/2C2C2C/TempUnityLogConsoleClone" target="_blank" rel="noopener">https://github.com/2C2C2C/TempUnityLogConsoleClone</a></p>
]]></content>
      <categories>
        <category>UnityEditor</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UnityEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityEditor EasyButton 简易编辑器按钮</title>
    <url>/2020/06/05/20200605-Unity-EasyButton/</url>
    <content><![CDATA[<p>一个比较简单但是方便的东西</p>
<h1 id="这是啥"><a href="#这是啥" class="headerlink" title="这是啥"></a>这是啥</h1><p>我们平时些写了一些函数在MonoBehavior里想测试，这边可以整一个特性放在需要快速调用的方法上(限于无参数的函数)。<br>这边可以做一个编辑器的按钮，直接放在MonoBehavior的组件面板上。</p>
<h1 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h1><p>先定义我们需要的这个特性，既然是做个按钮，那就叫Button好了。那么这个特性就应该叫做ButtonAttribute。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Method)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ButtonAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> m_methodName = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ButtonAttribute</span>(<span class="params"><span class="keyword">string</span> methodName</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        m_methodName = methodName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然我们要在Inspector面板上加东西，那我们也要操作一下Inspector面板。<br>我们做一个CustomEditor面板给我们的MonoBehavior，这个面板会作用于所有的MonoBehavior。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">CustomEditor(typeof(MonoBehaviour), true), CanEditMultipleObjects</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseEditor</span> : <span class="title">Editor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Type m_targetType = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInspectorGUI</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// draw default stuff</span></span><br><span class="line">        <span class="keyword">base</span>.OnInspectorGUI();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == m_targetType)</span><br><span class="line">            m_targetType = target.GetType();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (m_targetType != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// try find member function and static function :)</span></span><br><span class="line">            MethodInfo[] methods = m_targetType.GetMethods(BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> method <span class="keyword">in</span> methods)</span><br><span class="line">            &#123;</span><br><span class="line">                ButtonAttribute button = method.GetCustomAttribute&lt;ButtonAttribute&gt;();</span><br><span class="line">                <span class="keyword">if</span> (button != <span class="literal">null</span> &amp;&amp; method.GetParameters().Length &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    EditorGUILayout.HelpBox(<span class="string">"ButtonAttribute: method cant have parameterz."</span>, MessageType.Warning);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (button != <span class="literal">null</span> &amp;&amp; GUILayout.Button(button.m_methodName))</span><br><span class="line">                &#123;</span><br><span class="line">                    method.Invoke(target, <span class="keyword">new</span> <span class="keyword">object</span>[] &#123; &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            m_targetType = m_targetType.BaseType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后新建一个MonoBehavior脚本，试试</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ToxicTester</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Button(<span class="meta-string">"try exec public method"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExecPublicMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Debug.Log(<span class="string">"try exec public method wa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Button(<span class="meta-string">"try exec protected method"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">ExecProtectedMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Debug.Log(<span class="string">"try exec protected method wa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    [<span class="meta">Button(<span class="meta-string">"try exec private method"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ExecPrivateMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Debug.Log(<span class="string">"try exec private method wa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Button(<span class="meta-string">"try exec public static method"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ExecPublicStaticMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Debug.Log(<span class="string">"try exec public static method wa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2020/06/05/20200605-Unity-EasyButton/20200605-pic001.png" class="" title="split">
<p>效果如图</p>
]]></content>
      <categories>
        <category>UnityEditor</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UnityEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>简易检测，目标是否在扇形区域(2D)</title>
    <url>/2020/06/14/20200614-check-target-fan-shape/</url>
    <content><![CDATA[<p>最近在项目组里做一些小游戏原型，深感自己菜得如虫豸。为了慢慢提升还是决定做一些记录，虽然只是很垃圾的功能。<br>因为做的是手游，所以对性能蛮看重的，说是原型，为了快也只是项目里开了个单独的新场景做的，3C都有，做好了可以直接打包APK试玩。<br>废话不多说，这次做的事很简单，在扇形区域内检测一些目标。因为听说Vector3. Angle()里会跑开方的计算，故尝试避免使用这个方法。</p>
<img src="/2020/06/14/20200614-check-target-fan-shape/20200614-pic001.png" class="" title="split">
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>需要解决的需求是在检测者 前方 的一个扇形内检测目标物体，其实可以化简为2D平面的检测。<br>我决定多次使用点乘和叉乘来解决这个问题。</p>
<p>已知数据：<br>检测者的位置，朝向，检测角度大小，半径大小<br>检测目标的位置</p>
<p>步骤：</p>
<ol>
<li>用检测者的前方向量和检测者到目标的方向向量点乘来判断目标物体是否在检测者前方。</li>
<li>用检测者前方方向向量和检测区域的两个边界方向分别叉乘得到两个法向向量A,B。</li>
<li>用检测者到目标的方向向量和检测区域的两个边界方向分别叉乘得到两个法向向量C,D。</li>
<li>用点乘检测C,D是否同向，是，则在检测区外</li>
<li>是否同时满足向量A,C同向，向量B,D同向，是，则在检测区内</li>
</ol>
<p>其实我自己都感觉这中文，写得很乱，还不如直接看代码23333<br>全部代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TargetCheckTester</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Transform m_transform = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> m_checkAngle = <span class="number">60.0f</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> m_checkRadius = <span class="number">6.0f</span>;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    <span class="keyword">private</span> Transform m_targetTransform = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckTarget1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == m_targetTransform)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        Vector3 myPos = m_transform.position;</span><br><span class="line">        Vector3 myForward = m_transform.forward;</span><br><span class="line">        <span class="keyword">float</span> halfAngle = m_checkAngle * <span class="number">0.5f</span>;</span><br><span class="line">        Vector3 dirUp = Quaternion.Euler(<span class="number">0.0f</span>, -halfAngle, <span class="number">0.0f</span>) * myForward;</span><br><span class="line">        Vector3 dirDown = Quaternion.Euler(<span class="number">0.0f</span>, halfAngle, <span class="number">0.0f</span>) * myForward;</span><br><span class="line"></span><br><span class="line">        Vector3 upCheck = Vector3.Cross(myForward, dirUp);</span><br><span class="line">        Vector3 downCheck = Vector3.Cross(myForward, dirDown);</span><br><span class="line"></span><br><span class="line">        Vector3 targetPos = m_targetTransform.position;</span><br><span class="line">        <span class="comment">// hack, to make them on a 2d plane :)</span></span><br><span class="line">        targetPos.y = myPos.y;</span><br><span class="line">        Vector3 toTargetDir = targetPos - myPos;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// draw line</span></span><br><span class="line">        Vector3 point1 = myPos + dirUp * m_checkRadius;</span><br><span class="line">        Vector3 point2 = myPos + dirDown * m_checkRadius;</span><br><span class="line">        Vector3 point0 = myPos + myForward * m_checkRadius;</span><br><span class="line"></span><br><span class="line">        Debug.DrawLine(myPos, point1, Color.yellow, Time.deltaTime);</span><br><span class="line">        Debug.DrawLine(myPos, point2, Color.yellow, Time.deltaTime);</span><br><span class="line">        Debug.DrawLine(myPos, point0, Color.yellow, Time.deltaTime);</span><br><span class="line">        Debug.DrawLine(point1, point0, Color.yellow, Time.deltaTime);</span><br><span class="line">        Debug.DrawLine(point2, point0, Color.yellow, Time.deltaTime);</span><br><span class="line">        Debug.DrawLine(myPos, targetPos, Color.red, Time.deltaTime);</span><br><span class="line">        <span class="comment">// draw line</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Vector3.Dot(toTargetDir, myForward) &lt; <span class="number">0.0f</span> || toTargetDir.sqrMagnitude &gt; m_checkRadius * m_checkRadius)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        Vector3 targetUpCheck = Vector3.Cross(toTargetDir, dirUp);</span><br><span class="line">        Vector3 targetDownCheck = Vector3.Cross(toTargetDir, dirDown);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> selfCheck = Vector3.Dot(targetUpCheck, targetDownCheck);</span><br><span class="line">        <span class="keyword">float</span> dotCheckUp = Vector3.Dot(upCheck, targetUpCheck);</span><br><span class="line">        <span class="keyword">float</span> dotCheckDown = Vector3.Dot(targetDownCheck, downCheck);</span><br><span class="line">        <span class="keyword">if</span> (selfCheck &lt;= <span class="number">0.0f</span> &amp;&amp; dotCheckUp * dotCheckDown &gt;= <span class="number">0.0f</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">"target in sight"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">region</span> mono method</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        m_transform = <span class="keyword">this</span>.transform;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        CheckTarget1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2020/06/14/20200614-check-target-fan-shape/20200614-pic002.png" class="" title="split">]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Gameplay</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityObject 空引用检查小测试</title>
    <url>/2020/06/20/20200620-unity-obj-null-check/</url>
    <content><![CDATA[<blockquote>
<p>Classes deriving from Unity. Object inherit equality operators that change the behaviour of the == and != operators.<br>While these operators will perform standard . NET reference equality, if comparing one side to null, these operators will call native code to check if the underlying native engine object is still alive. </p>
</blockquote>
<p>这段解释来自Rider的提示：<br><a href="https://github.com/JetBrains/resharper-unity/wiki/Avoid-null-comparisons-against-UnityEngine.Object-subclasses" target="_blank" rel="noopener">https://github.com/JetBrains/resharper-unity/wiki/Avoid-null-comparisons-against-UnityEngine.Object-subclasses</a></p>
<p>UnityEngine 底层是C++写的，所以说，其实我们对UnityObject的空引用检查都会再深入到里面C++那一层去再检查，这个检查是比较消耗的。<br>之前曾经遇到因为使用了 ?. 语法糖而导致的 this 指针为null的奇妙bug，大概也是因为这个原因。</p>
<p>现在的公司是做手游的，大家对性能都比较看重，不过我也真的好奇这个检查到底有多消耗，决定跑一跑试试。</p>
<h1 id="Test-Case"><a href="#Test-Case" class="headerlink" title="Test Case"></a>Test Case</h1><p>因为是做手游，随意干脆就在手机上测试好了。<br>大概是这样的环境:<br>Unity 2019.4 LTS</p>
<p>移动设备这边是<br>Google Pixel Verzion(俺穷买美版)<br>Android 9 (已获取Root权限)</p>
<p>TestCase 这边其实我都是瞎弄的。</p>
<p>分别进行三种测试：<br>Unity Object 的空引用检查；<br>POCO Object 的空引用检查；<br>bool 的直接检查；(因为我觉得这是一个代替Unity Object空引用检查的一个方法</p>
<p>每一种检查都有检查到true和false的两种情况，并循环跑多次。</p>
<p>然后，上代码！</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TempCheckTest</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TempObjA</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> m_tempNum = <span class="number">56</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NullCheckTester</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// unity obj null check</span></span><br><span class="line">        <span class="keyword">private</span> Transform m_emptyTransform = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> Transform m_selfTransform = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// poco obj null check</span></span><br><span class="line">        <span class="keyword">private</span> TempObjA m_emptyObjA = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> TempObjA m_objA = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// bool check</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">bool</span> m_boolTrue = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">bool</span> m_boolFalse = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Header(<span class="meta-string">"test"</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> m_checkTimes = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Header(<span class="meta-string">"UI side"</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> UnityEngine.UI.Text m_outPutText = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> UnityEngine.UI.Button m_doUnityObjTestButton = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> UnityEngine.UI.Button m_doPocoObjTestButton = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> UnityEngine.UI.Button m_doBoolTestButton = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> UnityEngine.UI.InputField m_inputField = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Button(<span class="meta-string">"init awake"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InitTester</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            m_emptyTransform = <span class="literal">null</span>;</span><br><span class="line">            m_selfTransform = <span class="keyword">this</span>.transform;</span><br><span class="line"></span><br><span class="line">            m_emptyObjA = <span class="literal">null</span>;</span><br><span class="line">            m_objA = <span class="keyword">new</span> TempObjA();</span><br><span class="line"></span><br><span class="line">            m_boolTrue = <span class="literal">true</span>;</span><br><span class="line">            m_boolFalse = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            m_outPutText.text = <span class="keyword">string</span>.Empty;</span><br><span class="line"></span><br><span class="line">            m_doUnityObjTestButton.onClick.RemoveAllListeners();</span><br><span class="line">            m_doPocoObjTestButton.onClick.RemoveAllListeners();</span><br><span class="line">            m_doBoolTestButton.onClick.RemoveAllListeners();</span><br><span class="line"></span><br><span class="line">            m_doUnityObjTestButton.onClick.AddListener(DoUnityObjNullCheckTest);</span><br><span class="line">            m_doPocoObjTestButton.onClick.AddListener(DoPOCOObjNullCheckTest);</span><br><span class="line">            m_doBoolTestButton.onClick.AddListener(DoBoolObjNullCheckTest);</span><br><span class="line"></span><br><span class="line">            m_inputField.onValueChanged.RemoveAllListeners();</span><br><span class="line">            m_inputField.onValueChanged.AddListener(OnInputNumberChanged);</span><br><span class="line">            m_checkTimes = <span class="number">100000</span>;</span><br><span class="line">            m_inputField.text = m_checkTimes.ToString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Button(<span class="meta-string">"do unity.object null check test"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoUnityObjNullCheckTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            System.Diagnostics.Stopwatch watcher = <span class="keyword">new</span> System.Diagnostics.Stopwatch();</span><br><span class="line">            watcher.Start();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_checkTimes; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == m_emptyTransform) &#123;&#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == m_selfTransform) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            watcher.Stop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> outPut = <span class="string">$"do unity.object null check test 2*<span class="subst">&#123;m_checkTimes&#125;</span> cost <span class="subst">&#123;watcher.ElapsedMilliseconds&#125;</span>ms"</span>;</span><br><span class="line">            m_outPutText.text = outPut;</span><br><span class="line">            Debug.Log(outPut);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Button(<span class="meta-string">"do poco object null check test"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoPOCOObjNullCheckTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            System.Diagnostics.Stopwatch watcher = <span class="keyword">new</span> System.Diagnostics.Stopwatch();</span><br><span class="line">            watcher.Start();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_checkTimes; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == m_emptyObjA) &#123;&#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == m_objA) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            watcher.Stop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> outPut = <span class="string">$"do poco object null check test 2*<span class="subst">&#123;m_checkTimes&#125;</span> cost <span class="subst">&#123;watcher.ElapsedMilliseconds&#125;</span>ms"</span>;</span><br><span class="line">            m_outPutText.text = outPut;</span><br><span class="line">            Debug.Log(outPut);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Button(<span class="meta-string">"do bool check test"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DoBoolObjNullCheckTest</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            System.Diagnostics.Stopwatch watcher = <span class="keyword">new</span> System.Diagnostics.Stopwatch();</span><br><span class="line">            watcher.Start();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_checkTimes; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (m_boolFalse) &#123;&#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (m_boolTrue) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            watcher.Stop();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">string</span> outPut = <span class="string">$"do bool check test 2*<span class="subst">&#123;m_checkTimes&#125;</span> cost <span class="subst">&#123;watcher.ElapsedMilliseconds&#125;</span>ms"</span>;</span><br><span class="line">            m_outPutText.text = outPut;</span><br><span class="line">            Debug.Log(outPut);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnInputNumberChanged</span>(<span class="params"><span class="keyword">string</span> arg0</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (!Int32.TryParse(arg0, <span class="keyword">out</span> result))</span><br><span class="line">                result = Int32.MaxValue;</span><br><span class="line"></span><br><span class="line">            m_checkTimes = result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> mono method</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Reset</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitTester();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            InitTester();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.enabled = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Test-Result"><a href="#Test-Result" class="headerlink" title="Test Result"></a>Test Result</h1><img src="/2020/06/20/20200620-unity-obj-null-check/20200620-pic001.png" class="" title="split">
<p>分别进行10w次和100w次测试看看结果。</p>
<p>10w次:<br>Unity Object null check 4~7ms<br>POCO Object null check 0ms<br>bool check 0ms</p>
<p>100w次:<br>Unity Object null check 45~60ms<br>POCO Object null check 3~4ms<br>bool check 2ms</p>
<p>当检测数量非常多的时候，Unity Object 空引用检查的性能消耗比其他两个大了很多很多。现在的项目里大部分东西其实都是POCO的。<br>似乎把UnityObject Destroy之后再手动把变量置空是个好习惯（</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UnityOptimization</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity函数Awake和OnEnable执行顺序小坑</title>
    <url>/2020/06/22/20200622-awake-enable-order/</url>
    <content><![CDATA[<blockquote>
<p>Awake: This function is always called before any Start functions and also just after a prefabis instantiated. (If a GameObject is inactive during start up Awake is not called until it is made active.)</p>
<p>OnEnable: (only called if the Object is active): This function is called just after the object is enabled. This happens when a MonoBehaviour instance is created, such as when a level is loaded or a GameObject with the script component is instantiated.</p>
</blockquote>
<p><a href="https://docs.unity3d.com/Manual/ExecutionOrder.html" target="_blank" rel="noopener">check the exec order here</a></p>
<img src="/2020/06/22/20200622-awake-enable-order/20200622-pic001.png" class="" title="split">
<p>今天做工时候遇到了一个问题，我在Mono A的 Awake 中把Mono A的实例绑定到了GameManager里，然后再Mono B的 OnEnable 中获取Mono A的实例，结果跳了个空引用异常。<br>把我惊了，原来这一年多来我一直在一个误区里。</p>
<p>我以前一直认为是当场景里所有的 Awake 跑完才开始跑 OnEnable()。但其实不是这样的。</p>
<p><strong>当一个Mono的 Awake 跑完以后会接着跑他的 OnEnable , 接着才去跑其他物体的 Awake 和 OnEnable。</strong></p>
<p>随便写两行测试一下就知道了。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TesterA1</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Type m_type = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        m_type = <span class="keyword">this</span>.GetType();</span><br><span class="line">        Debug.Log(<span class="string">$"<span class="subst">&#123;m_type.Name&#125;</span> awake"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Debug.Log(<span class="string">$"<span class="subst">&#123;m_type.Name&#125;</span> on enable"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TesterB1</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Start is called before the first frame update</span></span><br><span class="line">    <span class="keyword">private</span> Type m_type = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        m_type = <span class="keyword">this</span>.GetType();</span><br><span class="line">        Debug.Log(<span class="string">$"<span class="subst">&#123;m_type.Name&#125;</span> awake"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Debug.Log(<span class="string">$"<span class="subst">&#123;m_type.Name&#125;</span> on enable"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TesterC1</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Type m_type = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        m_type = <span class="keyword">this</span>.GetType();</span><br><span class="line">        Debug.Log(<span class="string">$"<span class="subst">&#123;m_type.Name&#125;</span> awake"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Debug.Log(<span class="string">$"<span class="subst">&#123;m_type.Name&#125;</span> on enable"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>都整上一样的内容，A和C绑在物体tester01上，B绑在物体tester02上。</p>
<img src="/2020/06/22/20200622-awake-enable-order/20200622-pic002.png" class="" title="split">
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity OnAudioFilterRead 学习笔记</title>
    <url>/2020/10/17/20201017-unity-onaudiofilterread/</url>
    <content><![CDATA[<p>最近想着做一个音乐游戏的DEMO试试，但是毫无头绪不知道怎么开始。看了下邦邦的视频决定先把节拍器做出来，再用节拍器提供的事件去支撑起其它的部分。</p>
<p>因为完全没做过音乐游戏，而且也对游戏引擎以及声音方面没有什么了解，所以开始在网上海搜节拍器的代码并拿来测试。</p>
<p>最后得到俩解决方案：1.在Unity里写一个；2.使用专业的音频插件（如CRIWARE或者WWISE），使用里面的节拍器。<br>因为只是尝试做做DEMO，决定先不引入音频插件了。</p>
<p>在冲浪查询的时候发现Unity的官方文档中已经写好了一个！真是太棒了，马上嫖过来用。为了方便之后使用，我也决定把这份代码尽可能看懂。</p>
<p>下面是Unity的源码<br><a href="https://docs.unity3d.com/ScriptReference/MonoBehaviour.OnAudioFilterRead.html" target="_blank" rel="noopener">MonoBehaviour.OnAudioFilterRead(float[], int)</a><br><a href="https://docs.unity3d.com/ScriptReference/AudioSettings-dspTime.html" target="_blank" rel="noopener">AudioSettings.dspTime</a></p>
<h1 id="提取基本代码"><a href="#提取基本代码" class="headerlink" title="提取基本代码"></a>提取基本代码</h1><p>首先我大概跑了一下，看了一下，提取出了我认为是节拍器最基本的部分。</p>
<p>signatureHi / signatureLo =&gt; 这个就是我们所说的几几拍。<br>signatureHi是每小节的拍子数，signatureLo是指x分音符为1拍。accent是指当前小结内的拍子数。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[<span class="meta">RequireComponent(typeof(AudioSource))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MetronomeExample</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">double</span> bpm = <span class="number">128.0f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> signatureHi = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> signatureLo = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> nextTick = <span class="number">0.0F</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> sampleRate = <span class="number">0.0F</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> accent= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">bool</span> running = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> System.Action&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; OnBeatTick;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        accent = signatureHi;</span><br><span class="line">        sampleRate = AudioSettings.outputSampleRate;</span><br><span class="line">        nextTick = AudioSettings.dspTime * sampleRate;</span><br><span class="line">        running = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnAudioFilterRead</span>(<span class="params"><span class="keyword">float</span>[] data, <span class="keyword">int</span> channels</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!running)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> samplesPerTick = sampleRate * (<span class="number">60.0f</span> / bpm) * (<span class="number">4.0f</span> / signatureLo);</span><br><span class="line">        <span class="keyword">double</span> sample = AudioSettings.dspTime * sampleRate;</span><br><span class="line">        <span class="keyword">int</span> dataLen = data.Length / channels;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &lt; dataLen)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (sample + n &gt;= nextTick)</span><br><span class="line">            &#123;</span><br><span class="line">                nextTick += samplesPerTick;</span><br><span class="line">                <span class="keyword">if</span> (++accent &gt; signatureHi)</span><br><span class="line">                &#123;</span><br><span class="line">                    accent = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                OnBeatTick?.Invoke(accent, signatureHi);</span><br><span class="line">                Debug.Log(<span class="string">$"Tick: <span class="subst">&#123;accent&#125;</span> / <span class="subst">&#123;signatureHi&#125;</span>"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">nextTick = AudioSettings.dspTime * sampleRate; </span><br><span class="line">``` </span><br><span class="line">从 Start() 开始，先做节拍器的初始化。 因为需要准确的音频数据，所以我们会使用音频相关的函数来操作，而不是使用 Update()。</span><br><span class="line">通过当前的时间 * 当前的采样率，大概就能得到当前的音频信息总量。</span><br><span class="line"></span><br><span class="line">``` CSharp</span><br><span class="line">OnAudioFilterRead(<span class="keyword">float</span>[] data, <span class="keyword">int</span> channels)</span><br><span class="line">``` </span><br><span class="line">接着我们可以把 OnAudioFilterRead() 看作 Update() 来使用。 </span><br><span class="line">channels 大概是声道数,比如我平时用的辣鸡机器是双声道（左右的），那么 channels 的值就是<span class="number">2</span>。</span><br><span class="line">data[] 中存储的是当前这一次遍历的音频数据，也会包含不同声道的音频信息，比如\[<span class="number">0L</span>, <span class="number">1</span>R, <span class="number">2L</span>, <span class="number">3</span>R....\]之类的。</span><br><span class="line"></span><br><span class="line">``` CSharp</span><br><span class="line"><span class="keyword">double</span> samplesPerTick = sampleRate * (<span class="number">60.0f</span> / bpm) * (<span class="number">4.0f</span> / signatureLo);</span><br><span class="line"><span class="keyword">double</span> sample = AudioSettings.dspTime * sampleRate;</span><br><span class="line">``` </span><br><span class="line">这里是用与计算拍子的间隔时间。(<span class="number">60.0f</span> / bpm) 所计算的是对于 <span class="number">4</span>/<span class="number">4</span> 拍而言的拍子间隔时间。</span><br><span class="line">而 (<span class="number">4.0f</span> / signatureLo) 可以算出一个参数，并乘给 <span class="number">4</span>/<span class="number">4</span> 拍而言的拍子间隔时间。</span><br><span class="line">sample 可以粗浅的认为是当前的时间。</span><br><span class="line"></span><br><span class="line">``` CSharp</span><br><span class="line"><span class="keyword">while</span> (n &lt; dataLen)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (sample + n &gt;= nextTick)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 用起来就相当于</span></span><br><span class="line">        <span class="comment">// nextTime = Time.time * timeInterval; </span></span><br><span class="line">        nextTick += samplesPerTick;</span><br><span class="line">        <span class="keyword">if</span> (++accent &gt; signatureHi)</span><br><span class="line">        &#123;</span><br><span class="line">            accent = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        OnBeatTick?.Invoke(accent, signatureHi);</span><br><span class="line">        Debug.Log(<span class="string">$"Tick: <span class="subst">&#123;accent&#125;</span> / <span class="subst">&#123;signatureHi&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这边遍历一下接下来会播放的音频数据。根据数据的长度来判断是否会需要发出节拍器的 tick。</p>
<h1 id="节拍器音效"><a href="#节拍器音效" class="headerlink" title="节拍器音效"></a>节拍器音效</h1><p>在官方源码中还用到了一些其他的变量，并给data赋值，其实这些就是为了播放节拍器音效而存在的。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span> (n&lt;dataLen)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">float</span> x = gain * amp * Mathf.Sin(phase);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; channels)</span><br><span class="line">    &#123;</span><br><span class="line">        data[n * channels + i] += x;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (sample + n &gt;= nextTick)</span><br><span class="line">    &#123;</span><br><span class="line">        nextTick += samplesPerTick;</span><br><span class="line">        amp = <span class="number">1.0F</span>;</span><br><span class="line">        <span class="keyword">if</span> (++accent &gt; signatureHi)</span><br><span class="line">        &#123;</span><br><span class="line">            accent = <span class="number">1</span>;</span><br><span class="line">            amp *= <span class="number">2.0F</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        OnBeatTick?.Invoke(accent, signatureHi);</span><br><span class="line">        Debug.Log(<span class="string">$"Tick: <span class="subst">&#123;accent&#125;</span> / <span class="subst">&#123;signatureHi&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    phase += amp* <span class="number">0.3F</span>;</span><br><span class="line">    amp *= <span class="number">0.993F</span>;</span><br><span class="line">    n++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="摸了"><a href="#摸了" class="headerlink" title="摸了"></a>摸了</h1><p>感觉自己的知识面又窄又浅，还是需要多看书才行。</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Audio</tag>
      </tags>
  </entry>
  <entry>
    <title>UnityEditor Scrollview Pagination(分页)</title>
    <url>/2020/06/26/20200626-unity-editor-scrollview-pagination/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前在做CloneConsole的时候，会在每次绘制的时候尝试绘制所有的log，然后再交给UnityEditor自己去处理显示的逻辑。因为我们会堆积几百甚至几千条log，这样的做法无疑会带来性能问题，结果就是console卡得不能用。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>其实思路也很简单，只需要画那些会显示出来的item就行了。<br>在这之前需要算出哪些item是可以被显示出来的</p>
<ol>
<li>算出所有的item加起来有多高</li>
<li>用当前滑条的位置来推算出当前需要绘制的第一条item的索引</li>
<li>绘制item</li>
<li>绘制滑条并计算其下一次的位置</li>
</ol>
<p>其实这个思路应该也能应用到UGUI上，下次我也要试试。</p>
<h1 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h1><p>在一个新窗口中尝试画一画就好。<br>首先要准备好用来测试的一些数据。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TempDraw</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">System.Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">struct</span> TempDrawData</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> IconTag;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> TempMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TempDrawWindowTester</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> TempDrawWindowTester _instance = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> TempDrawWindowTester Instance =&gt; _instance;</span><br><span class="line"></span><br><span class="line">        List&lt;TempDrawData&gt; m_data = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// used to give out the data</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">event</span> System.Action&lt;List&lt;TempDrawData&gt;&gt; OnDataSpread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把测试用的数据都存在这个Mono里，再用它的静态事件把数据传递到窗口中。<br>代码里的 Button attribute 是用来在editor上创建按钮的。</p>
<p>测试用的数据准备好了，我们来来进行绘制。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TempDraw</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TempDrawWindow</span> : <span class="title">EditorWindow</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> WINDOW_NAME = <span class="string">"Temp Draw Window"</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> TempDrawWindow _instance = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> TempDrawWindow Instance =&gt; _instance;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> List&lt;TempDrawData&gt; m_data = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">float</span> m_scrollPosition = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> temp element</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">float</span> ELEMENT_HEIGHT = <span class="number">20.0f</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">float</span> ELEMENT_ICON_SIZE = <span class="number">20.0f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> icons</span></span><br><span class="line">        <span class="keyword">private</span> Texture2D m_infoIconSmall = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> Texture2D m_warningIconSmall = <span class="literal">null</span>;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        [<span class="meta">MenuItem(<span class="meta-string">"Window/Temp Draw Window"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OpenWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            TempDrawWindow window = GetWindow&lt;TempDrawWindow&gt;();</span><br><span class="line">            Texture2D icon = EditorGUIUtility.Load(<span class="string">"icons/UnityEditor.ConsoleWindow.png"</span>) <span class="keyword">as</span> Texture2D;</span><br><span class="line">            window.titleContent = <span class="keyword">new</span> GUIContent(WINDOW_NAME, icon);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetData</span>(<span class="params">List&lt;TempDrawData&gt; data</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == m_data)</span><br><span class="line">                m_data = <span class="keyword">new</span> List&lt;TempDrawData&gt;();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                m_data.Clear();</span><br><span class="line"></span><br><span class="line">            m_data.AddRange(data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawTempElement</span>(<span class="params">Rect elementRect, <span class="keyword">int</span> dataIndex</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Rect iconRect = <span class="keyword">new</span> Rect(elementRect.x, elementRect.y, ELEMENT_ICON_SIZE, elementRect.height);</span><br><span class="line">            <span class="keyword">if</span> (m_data[dataIndex].IconTag == <span class="number">0</span>)</span><br><span class="line">                GUI.Label(iconRect, m_infoIconSmall);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                GUI.Label(iconRect, m_warningIconSmall);</span><br><span class="line"></span><br><span class="line">            Rect labelRect = <span class="keyword">new</span> Rect(elementRect.x + ELEMENT_ICON_SIZE, elementRect.y, elementRect.width - ELEMENT_ICON_SIZE, elementRect.height);</span><br><span class="line">            GUI.Label(labelRect, <span class="string">$"Tag: <span class="subst">&#123;m_data[dataIndex].IconTag&#125;</span> ; Message: <span class="subst">&#123;m_data[dataIndex].TempMessage&#125;</span> ;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawTempRect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// only use half space of this shit window</span></span><br><span class="line">            Rect viewportRect = <span class="keyword">new</span> Rect(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="keyword">this</span>.position.width, <span class="keyword">this</span>.position.height * <span class="number">0.5f</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> scrollbarWidth = GUI.skin.verticalScrollbar.fixedWidth;</span><br><span class="line">            Rect scrollbarRect = <span class="keyword">new</span> Rect(viewportRect.x + viewportRect.width - scrollbarWidth, viewportRect.y, scrollbarWidth, viewportRect.height);</span><br><span class="line">            Rect currentRect = <span class="keyword">new</span> Rect(<span class="number">0.0f</span>, <span class="number">0.0f</span>, viewportRect.width - scrollbarWidth, viewportRect.height);</span><br><span class="line">            <span class="keyword">float</span> viewportHeight = viewportRect.height;</span><br><span class="line">            <span class="keyword">int</span> elementCount = m_data.Count;</span><br><span class="line"></span><br><span class="line">            GUI.BeginClip(currentRect); <span class="comment">// to clip the overflow stuff</span></span><br><span class="line">            <span class="keyword">int</span> indexOffset = Mathf.FloorToInt(m_scrollPosition / ELEMENT_HEIGHT);</span><br><span class="line">            <span class="keyword">int</span> showCount = Mathf.CeilToInt(currentRect.height / ELEMENT_HEIGHT);</span><br><span class="line">            showCount = showCount &gt; elementCount ? elementCount : showCount;</span><br><span class="line">            <span class="keyword">float</span> startPosY = (indexOffset * ELEMENT_HEIGHT) - m_scrollPosition;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; showCount; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Rect elementRect = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span> + startPosY + i * ELEMENT_HEIGHT, currentRect.width, ELEMENT_HEIGHT);</span><br><span class="line">                DrawTempElement(elementRect, indexOffset + i);</span><br><span class="line">            &#125;</span><br><span class="line">            GUI.EndClip();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// do stuff for scroller</span></span><br><span class="line">            <span class="keyword">float</span> fullElementHeight = elementCount * ELEMENT_HEIGHT;</span><br><span class="line">            m_scrollPosition = Mathf.Max(<span class="number">0</span>, GUI.VerticalScrollbar(scrollbarRect, m_scrollPosition, currentRect.height, <span class="number">0</span>, Mathf.Max(fullElementHeight, currentRect.height)));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> controlId = GUIUtility.GetControlID(FocusType.Passive);</span><br><span class="line">            <span class="keyword">float</span> scrollSensitivity = ELEMENT_HEIGHT;</span><br><span class="line">            <span class="keyword">float</span> maxScrollPos = (fullElementHeight &gt; currentRect.height) ? (fullElementHeight - currentRect.height) : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (EventType.ScrollWheel == Event.current.GetTypeForControl(controlId))</span><br><span class="line">            &#123;</span><br><span class="line">                m_scrollPosition = Mathf.Clamp(m_scrollPosition + Event.current.delta.y * scrollSensitivity, <span class="number">0</span>, maxScrollPos);</span><br><span class="line">                Event.current.Use();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">GetAsset</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            m_infoIconSmall = EditorGUIUtility.Load(<span class="string">"icons/console.infoicon.sml.png"</span>) <span class="keyword">as</span> Texture2D;</span><br><span class="line">            m_warningIconSmall = EditorGUIUtility.Load(<span class="string">"icons/console.warnicon.sml.png"</span>) <span class="keyword">as</span> Texture2D;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> life cycle</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _instance = <span class="keyword">this</span>;</span><br><span class="line">            m_data = <span class="keyword">new</span> List&lt;TempDrawData&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            TempDrawWindowTester.OnDataSpread -= SetData;</span><br><span class="line">            TempDrawWindowTester.OnDataSpread += SetData;</span><br><span class="line">            GetAsset();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            DrawTempRect();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            TempDrawWindowTester.OnDataSpread -= SetData;</span><br><span class="line">            _instance = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2020/06/26/20200626-unity-editor-scrollview-pagination/20200626-pic001.png" class="" title="split">
<img src="/2020/06/26/20200626-unity-editor-scrollview-pagination/20200626-pic002.png" class="" title="split">
<p>效果如图</p>
]]></content>
      <categories>
        <category>UnityEditor</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UnityEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>JS脚本删除豆瓣广播</title>
    <url>/2020/12/20/20201220-delete-douban-post/</url>
    <content><![CDATA[<h1 id="JS脚本删除豆瓣广播"><a href="#JS脚本删除豆瓣广播" class="headerlink" title="JS脚本删除豆瓣广播"></a>JS脚本删除豆瓣广播</h1><p>很久以前为了清理自己SPAM在微博的东西，找过批量删除微博的脚本。现在也想顺手清理一下豆瓣的，不过没找到比较好用的。<br>不过完全不会WEB开发，也只能自己拼凑一下。</p>
<p>直接上代码吧</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>豆瓣有保护机制的，如果在短时间内疯狂发送请求，会在一定时间内被BAN IP（亲身经历）。<br>所以我们可以试着用随机等待的方式来避免这个问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// I steal this from somewhere</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleepWait</span>(<span class="params">waitMsec</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> startMsec = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">new</span> <span class="built_in">Date</span>() - startMsec &lt; waitMsec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> step = <span class="number">0</span>; step &lt; <span class="number">10</span>; step++) &#123;</span><br><span class="line">        location.reload();</span><br><span class="line">        <span class="keyword">var</span> waitDuration = (<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>) + <span class="number">1</span>) * <span class="number">10000</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'test log, next exec in'</span> + waitDuration + <span class="string">'ms'</span>);</span><br><span class="line">        sleepWait(waitDuration);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>删除的代码是我白嫖来的，在 我的广播 的页面里执行这个函数大概可以删除当前页面中的所有广播。<br>不过转发好像不一定能删除，之后还得找别的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// I steal this from somewhere</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execDelTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123; $.post_withck(<span class="string">"/j/status/delete"</span>, &#123; <span class="attr">sid</span>: c &#125;) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123; $.post_withck(<span class="string">"/j/status/unreshare"</span>, &#123; <span class="attr">sid</span>: c &#125;) &#125;;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">"a[data-reshare-id]"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        b($(<span class="keyword">this</span>).attr(<span class="string">"data-reshare-id"</span>));</span><br><span class="line">        $(<span class="keyword">this</span>).hide()</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">"div[data-sid]"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        a($(<span class="keyword">this</span>).attr(<span class="string">"data-sid"</span>));</span><br><span class="line">        $(<span class="keyword">this</span>).hide()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>完整代码如下，不过真的怕被BAN IP 可以把随机等待的时间设定得长一些</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// I steal this from somewhere</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleepWait</span>(<span class="params">waitMsec</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> startMsec = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">new</span> <span class="built_in">Date</span>() - startMsec &lt; waitMsec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// I steal this from somewhere</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execDelTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123; $.post_withck(<span class="string">"/j/status/delete"</span>, &#123; <span class="attr">sid</span>: c &#125;) &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123; $.post_withck(<span class="string">"/j/status/unreshare"</span>, &#123; <span class="attr">sid</span>: c &#125;) &#125;;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">"a[data-reshare-id]"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        b($(<span class="keyword">this</span>).attr(<span class="string">"data-reshare-id"</span>));</span><br><span class="line">        $(<span class="keyword">this</span>).hide()</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">"div[data-sid]"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        a($(<span class="keyword">this</span>).attr(<span class="string">"data-sid"</span>));</span><br><span class="line">        $(<span class="keyword">this</span>).hide()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execDelLoop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> step = <span class="number">0</span>; step &lt; <span class="number">10</span>; step++) &#123;</span><br><span class="line">        location.reload();</span><br><span class="line">        <span class="keyword">var</span> waitDuration = (<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>) + <span class="number">1</span>) * <span class="number">10000</span>;</span><br><span class="line">        sleepWait(waitDuration);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// finally execute deletion :D</span></span><br><span class="line">execDelLoop();</span><br></pre></td></tr></table></figure>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>感觉web这边可以做蛮多方便日常生活用的脚本，改天真的要开始学一学才行。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>常用</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>查询Unity Object在工程中的引用</title>
    <url>/2020/11/21/20201121-find-asset-reference/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上周把bug修得差不多了，这周稍微有点空闲时间了，就把以前想做的一些东西大概看了一下。<br>之前因为清理文件没有及时清除相关引用，结果项目跑起来的时候有各种沙雕报错。只能再一个个物体检查，好麻烦。<br>于是想试试能不能查到某个物体被其它哪些物体引用。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>好在 Unity提供了这个函数 AssetDatabase.GetDependencies() ,可以获得某个 asset 的依赖项。<br><a href="https://docs.unity3d.com/ScriptReference/AssetDatabase.GetDependencies.html" target="_blank" rel="noopener">AssetDatabase.GetDependencies()</a></p>
<p>假设我们需要知道物体 A 被哪些其他的物体引用。那就遍历所有物体的依赖项，把依赖项中包含物体 A 的物体筛选出来即可。</p>
<h1 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// to find the reference of the target unity object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">FindReferencesInProject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">TryFindReferenceOfUobject</span>(<span class="params">UnityEngine.Object uobject</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">bool</span> result = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">string</span> path = AssetDatabase.GetAssetPath(uobject);</span><br><span class="line">        <span class="keyword">if</span> (AssetDatabase.IsValidFolder(path))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// dun do it for a folder :)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FindObjectReference(uobject);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// why the order is like this?</span></span><br><span class="line">    [<span class="meta">MenuItem(<span class="meta-string">"Assets/Find References In Project"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FindSelectedObjectReferences</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != Selection.activeObject)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">string</span> path = AssetDatabase.GetAssetPath(Selection.activeObject);</span><br><span class="line">            <span class="keyword">if</span> (!AssetDatabase.IsValidFolder(path))</span><br><span class="line">            &#123;</span><br><span class="line">                FindObjectReference(Selection.activeObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FindObjectReference</span>(<span class="params">UnityEngine.Object uobject</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        System.Diagnostics.Stopwatch stopWatcher = <span class="keyword">new</span> System.Diagnostics.Stopwatch();</span><br><span class="line">        stopWatcher.Start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">string</span> targetPath = AssetDatabase.GetAssetPath(uobject);</span><br><span class="line">        List&lt;<span class="keyword">string</span>&gt; referencesPaths = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">        Dictionary&lt;<span class="keyword">string</span>, List&lt;<span class="keyword">string</span>&gt;&gt; referenceCache = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, List&lt;<span class="keyword">string</span>&gt;&gt;();</span><br><span class="line">        <span class="keyword">string</span>[] assetGuids = AssetDatabase.FindAssets(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; assetGuids.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">string</span> assetPath = AssetDatabase.GUIDToAssetPath(assetGuids[i]);</span><br><span class="line">            <span class="keyword">string</span>[] dependencies = AssetDatabase.GetDependencies(assetPath, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dependencies.Length; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (dependencies[j] == targetPath)</span><br><span class="line">                &#123;</span><br><span class="line">                    referencesPaths.Add(assetPath);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FindReferencesInProjectEditor.OpenWindow();</span><br><span class="line">        FindReferencesInProjectEditor window = FindReferencesInProjectEditor.GetWindow();</span><br><span class="line">        window.SetPaths(referencesPaths.ToArray());</span><br><span class="line">        window.SetTargetUobject(uobject);</span><br><span class="line"></span><br><span class="line">        stopWatcher.Stop();</span><br><span class="line">        Debug.Log(<span class="string">$"search references for <span class="subst">&#123;uobject.name&#125;</span> cost <span class="subst">&#123;stopWatcher.ElapsedMilliseconds&#125;</span>ms"</span>);</span><br><span class="line"></span><br><span class="line">        referenceCache.Clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// a simple window to show the result, and also we can ping those result object :D</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FindReferencesInProjectEditor</span> : <span class="title">EditorWindow</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Rect m_viewportRect = <span class="keyword">default</span>;</span><br><span class="line">    <span class="keyword">private</span> Rect m_listRect = <span class="keyword">default</span>;</span><br><span class="line">    <span class="keyword">private</span> Rect m_bottomRect = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> m_scrollPosition = <span class="keyword">default</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">string</span>[] m_targetPaths = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">float</span> ELEMENT_HEIGHT = <span class="number">20.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">float</span> ELEMENT_ICON_SIZE = <span class="number">20.0f</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">float</span> SCROLLER_WIDTH = <span class="number">15.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">bool</span> m_hasGetGUIStyle = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GUIStyle m_scrollerStyle = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> GUIStyle m_buttonElementStyle = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UnityEngine.Object m_selectedUnityObject = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> System.Type m_uobjType = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OpenWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        FindReferencesInProjectEditor window = GetWindow&lt;FindReferencesInProjectEditor&gt;();</span><br><span class="line">        Texture2D icon = EditorGUIUtility.Load(<span class="string">"icons/UnityEditor.ConsoleWindow.png"</span>) <span class="keyword">as</span> Texture2D;</span><br><span class="line">        window.titleContent = <span class="keyword">new</span> GUIContent(<span class="string">"reference find result"</span>, icon);</span><br><span class="line">        Vector2 minSize = <span class="keyword">new</span> Vector2(<span class="number">500.0f</span>, <span class="number">300.0f</span>);</span><br><span class="line">        window.minSize = minSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FindReferencesInProjectEditor <span class="title">GetWindow</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> GetWindow&lt;FindReferencesInProjectEditor&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetPaths</span>(<span class="params"><span class="keyword">in</span> <span class="keyword">string</span>[] paths</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        m_targetPaths = paths;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetTargetUobject</span>(<span class="params">UnityEngine.Object uobject</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        m_selectedUnityObject = uobject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawContent</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// only use half space of this shit window</span></span><br><span class="line">        m_viewportRect = <span class="keyword">new</span> Rect(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="keyword">this</span>.position.width - SCROLLER_WIDTH, <span class="keyword">this</span>.position.height * <span class="number">0.8f</span>);</span><br><span class="line">        m_listRect = <span class="keyword">new</span> Rect(<span class="number">0.0f</span>, <span class="number">0.0f</span>, m_viewportRect.width, m_viewportRect.height);</span><br><span class="line">        <span class="keyword">int</span> elementCount = m_targetPaths.Length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (elementCount &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        GUI.BeginClip(m_listRect); <span class="comment">// to clip the overflow stuff</span></span><br><span class="line">        <span class="keyword">int</span> indexOffset = Mathf.FloorToInt(m_scrollPosition / ELEMENT_HEIGHT);</span><br><span class="line">        <span class="keyword">int</span> showCount = Mathf.CeilToInt(m_listRect.height / ELEMENT_HEIGHT);</span><br><span class="line">        showCount = showCount &gt; elementCount ? elementCount : showCount;</span><br><span class="line">        <span class="keyword">float</span> startPosY = (indexOffset * ELEMENT_HEIGHT) - m_scrollPosition;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; showCount; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Rect elementRect = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span> + startPosY + i * ELEMENT_HEIGHT, m_listRect.width, ELEMENT_HEIGHT);</span><br><span class="line">            DrawElement(elementRect, indexOffset + i);</span><br><span class="line">        &#125;</span><br><span class="line">        GUI.EndClip();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawElement</span>(<span class="params">Rect elementRect, <span class="keyword">int</span> dataIndex</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dataIndex &lt; m_targetPaths.Length &amp;&amp; GUI.Button(elementRect, <span class="string">$"path <span class="subst">&#123;m_targetPaths[dataIndex]&#125;</span> ;"</span>, m_buttonElementStyle))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">$"<span class="subst">&#123;m_targetPaths[dataIndex]&#125;</span>"</span>);</span><br><span class="line">            UnityEngine.Object targetObj = AssetDatabase.LoadAssetAtPath&lt;UnityEngine.Object&gt;(m_targetPaths[dataIndex]);</span><br><span class="line">            EditorGUIUtility.PingObject(targetObj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawScroller</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// draw scroller on the right correctly</span></span><br><span class="line">        <span class="keyword">int</span> elementCount = m_targetPaths.Length;</span><br><span class="line">        <span class="keyword">float</span> fullElementHeight = elementCount * ELEMENT_HEIGHT;</span><br><span class="line"></span><br><span class="line">        Rect scrollbarRect = <span class="keyword">new</span> Rect(m_viewportRect.x + m_viewportRect.width, m_viewportRect.y, SCROLLER_WIDTH, m_viewportRect.height);</span><br><span class="line">        m_scrollPosition = Mathf.Max(<span class="number">0</span>, GUI.VerticalScrollbar(scrollbarRect, m_scrollPosition, m_listRect.height, <span class="number">0</span>, Mathf.Max(fullElementHeight, m_listRect.height)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> controlId = GUIUtility.GetControlID(FocusType.Passive);</span><br><span class="line">        <span class="keyword">float</span> scrollSensitivity = ELEMENT_HEIGHT;</span><br><span class="line">        <span class="keyword">float</span> maxScrollPos = (fullElementHeight &gt; m_listRect.height) ? (fullElementHeight - m_listRect.height) : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (EventType.ScrollWheel == Event.current.GetTypeForControl(controlId))</span><br><span class="line">        &#123;</span><br><span class="line">            m_scrollPosition = Mathf.Clamp(m_scrollPosition + Event.current.delta.y * scrollSensitivity, <span class="number">0</span>, maxScrollPos);</span><br><span class="line">            Event.current.Use();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">GetGUIStyle</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// scroller</span></span><br><span class="line">        m_scrollerStyle = <span class="keyword">new</span> GUIStyle(GUI.skin.verticalScrollbar);</span><br><span class="line">        m_scrollerStyle.stretchWidth = <span class="literal">false</span>;</span><br><span class="line">        m_scrollerStyle.fixedWidth = SCROLLER_WIDTH;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// button element</span></span><br><span class="line">        m_buttonElementStyle = <span class="keyword">new</span> GUIStyle(GUI.skin.button);</span><br><span class="line">        m_buttonElementStyle.alignment = TextAnchor.MiddleLeft;</span><br><span class="line"></span><br><span class="line">        m_uobjType = <span class="keyword">typeof</span>(UnityEngine.Object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawBottom</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        m_bottomRect = <span class="keyword">new</span> Rect(<span class="number">0.0f</span>, <span class="keyword">this</span>.position.height * <span class="number">0.8f</span>, <span class="keyword">this</span>.position.width, <span class="keyword">this</span>.position.height * <span class="number">0.2f</span>);</span><br><span class="line">        Rect fieldRect = <span class="keyword">new</span> Rect(<span class="number">10.0f</span>, m_bottomRect.y + <span class="number">10.0f</span>, <span class="number">100.0f</span>, <span class="number">20.0f</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == m_uobjType)</span><br><span class="line">            m_uobjType = <span class="keyword">typeof</span>(UnityEngine.Object);</span><br><span class="line"></span><br><span class="line">        m_selectedUnityObject = EditorGUI.ObjectField(fieldRect, m_selectedUnityObject, m_uobjType, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        Rect buttonRect = <span class="keyword">new</span> Rect(<span class="number">150.0f</span>, m_bottomRect.y, <span class="number">200.0f</span>, <span class="number">40.0f</span>);</span><br><span class="line">        <span class="keyword">if</span> (GUI.Button(buttonRect, <span class="string">"try find reference"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            FindObjectReference();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FindObjectReference</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == m_selectedUnityObject)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Clear();</span><br><span class="line">        FindReferencesInProject.TryFindReferenceOfUobject(m_selectedUnityObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Clear</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        m_targetPaths = System.Array.Empty&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!m_hasGetGUIStyle)</span><br><span class="line">        &#123;</span><br><span class="line">            GetGUIStyle();</span><br><span class="line">            m_hasGetGUIStyle = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DrawContent();</span><br><span class="line">        DrawScroller();</span><br><span class="line">        DrawBottom();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2020/11/21/20201121-find-asset-reference/20201121-pic001.png" class="" title="split">
<img src="/2020/11/21/20201121-find-asset-reference/20201121-pic002.png" class="" title="split">
<p>搜索结果我选择使用一个简单的 editor window 来显示。<br>同时还能填入新的目标物体再做一次搜索。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最近都没有做编辑器这边的开发，感觉直接退回了起点。感觉Unity编辑器的文档没有想象中那么详细，很多时候反而没有问同事来得方便。可能该提高自己的英文水平了。</p>
]]></content>
      <categories>
        <category>UnityEditor</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UnityEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>修改commit消息</title>
    <url>/2021/04/08/20210408-edit-commit-msg/</url>
    <content><![CDATA[<p>前几天打游戏太疯了，上班的时候脑子都不清醒，commit的时候输错了东西，push的时候被block了才发现。<br>结果还因为不会改commit消息，还错误地操作使得工作全没了。</p>
<h1 id="修改当前最新的一条commit消息"><a href="#修改当前最新的一条commit消息" class="headerlink" title="修改当前最新的一条commit消息"></a>修改当前最新的一条commit消息</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 修改当前最新的一条commit消息</span></span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>
<p>非常简单，一个命令就搞定了。然后就可以正常push了。</p>
<p>如果是需要修改已经推送到远端的commit，可以再这个命令之后尝试push —force。<br>不过我觉得这样的情景非常之少，都已经PUSH上去了为啥还需要改啊:(</p>
<h1 id="修改往前第N条commit消息-还未推送到远端的"><a href="#修改往前第N条commit消息-还未推送到远端的" class="headerlink" title="修改往前第N条commit消息(还未推送到远端的)"></a>修改往前第N条commit消息(还未推送到远端的)</h1><img src="/2021/04/08/20210408-edit-commit-msg/20210408-edit-commit-msg-01.png" class="" title="split">
<p>如图，我需要修改图中选定的那一个commit。从我当前位置数，是第3个commit。<br>则X就应该是3。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git rebase -i HEAD~X</span><br><span class="line"><span class="comment"># X is the number of commits to go back</span></span><br><span class="line"><span class="comment"># Move to the line of your commit, change pick into edit,</span></span><br><span class="line"><span class="comment"># then change your commit message:</span></span><br><span class="line">git commit --amend</span><br><span class="line"><span class="comment"># Finish the rebase with:</span></span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># :D</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>执行rebase后，会让选择需要对哪条commit进行什么样的操作。</p>
<img src="/2021/04/08/20210408-edit-commit-msg/20210408-edit-commit-msg-02.png" class="" title="split">
<p>需要编辑消息则就把pick改成edit，然后保存，退出文本编辑。就可以使用 commit —amend 来修改消息了，然后再执行下一条命令完成rebase。<br>然后就是快乐push。</p>
<p>其实也可以同时edit多条commit。这样，在使用　commit —amend　时会从最老的commit开始编辑。完成一条的编辑就需要 rebase —continue。<br>之后才能继续编辑下一条。</p>
<img src="/2021/04/08/20210408-edit-commit-msg/20210408-edit-commit-msg-03.png" class="" title="split">
<p>如果修改了曾经push过的commit，就需要push —force。</p>
<img src="/2021/04/08/20210408-edit-commit-msg/20210408-edit-commit-msg-04.png" class="" title="split">
<img src="/2021/04/08/20210408-edit-commit-msg/20210408-edit-commit-msg-05.png" class="" title="split">]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 本地忽略文件</title>
    <url>/2021/04/23/20210423-gitignore-locally/</url>
    <content><![CDATA[<p>最近在拼UI，需要建立几个临时的场景在本地。自然不能上传，但是又想手贱 git add . 还是决定在本地手动设置忽略一些文件。</p>
<h1 id="设置Git-exclude"><a href="#设置Git-exclude" class="headerlink" title="设置Git exclude"></a>设置Git exclude</h1><p>首先需要找到这个文件。</p>
<p>exclude 文件在 如图的目录中</p>
<img src="/2021/04/23/20210423-gitignore-locally/20210423-gitignore-locally-pic01.png" class="" title="split">
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\.git\info\</span><br></pre></td></tr></table></figure>
<p>找到以后以文本文件的形式打开，用法和 gitignore 差不多，我还么有深入研究，但我差不多这样用。</p>
<img src="/2021/04/23/20210423-gitignore-locally/20210423-gitignore-locally-pic02.png" class="" title="split">
<p>把我需要忽略的本地目录填上去就可以了。<br>顺便一说，若使用这个方式忽略了某个目录，当把已经进行版本控制的文件丢进这个目录里时，Git中会生成一个delete的改动。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 自制 Scrollrect 小坑</title>
    <url>/2021/06/06/20210606-UGuiInputOnScrollkeng/</url>
    <content><![CDATA[<h1 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h1><p>终于改来改去，俺做的这个循环滚动列表成功运用到了项目里的仓库UI上。但是还是被一个BUG给击垮了。</p>
<p>UX给到的设计稿是当玩家鼠标在其中一个物品上时，要有一个小弹窗显示这个物品的一些讯息。<br>BUG的表现是当我已经’选中’一个物品后，用鼠标滚轮滚到下一行，小弹窗显示的还是上一个物品的讯息。</p>
<h1 id="BUG原因"><a href="#BUG原因" class="headerlink" title="BUG原因"></a>BUG原因</h1><p>我在UI脚本中写了关于鼠标移动进入和离开的处理，但其实当列表滚动时候，鼠标下面的物体还是上一个物体，但是物体内的数据已经改变，却没有刷新。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>其实也还算有个凑合的解决方案。导师之前重写了InputModule，所以我们决定在这边做改动。<br>当发生滚动时，我们需要重新做raycast。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnScrollWheel</span>(<span class="params">InputAction.CallbackContext context</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (IsActive())</span><br><span class="line">    &#123;</span><br><span class="line">        PointerEventData eventData = GetPointerData();</span><br><span class="line">        eventData.button = PointerEventData.InputButton.Middle;</span><br><span class="line">        eventData.Reset();</span><br><span class="line">        eventData.scrollDelta = context.ReadValue&lt;Vector2&gt;()</span><br><span class="line">        GameObject testScrollObject = ExecuteEventExecuteHierarchy(eventData.pointerCurrentRaycasgameObject, eventData, ExecuteEvents.scrollHandler)</span><br><span class="line">        <span class="keyword">if</span> (testScrollObject != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// to re-do the reycast cuz we may scroll a recyclscrollrect</span></span><br><span class="line">            HandlePointerExitAndEnter(eventData, <span class="literal">null</span>);</span><br><span class="line">            m_rayCastDelayFrame = SCROLL_RAYCAST_DELAY;</span><br><span class="line">            <span class="comment">// SCROLL_RAYCAST_DELAY =3 or 5, depends....</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们先清楚了事件数据所认为的鼠标悬停的物体，然后过几帧再重新发射射线进行检测。<br>因为我的循环滚动列表依赖于Unity自带的滚动视图，并且其位置也是在LateUpdate中更新的，所以我们最好在下一帧或者接下来的几帧后再做射线检测。。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// will call in update</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Process</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    .....</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    CheckAndDoDelayRaycast();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CheckAndDoDelayRaycast</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_rayCastDelayFrame &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (--m_rayCastDelayFrame == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> eventData = GetPointerData();</span><br><span class="line">        eventSystem.RaycastAll(eventData, m_RaycastResultCache);</span><br><span class="line">        <span class="keyword">var</span> firstRaycast = FindFirstRaycast(m_RaycastResultCache)</span><br><span class="line">        eventData.pointerCurrentRaycast = firstRaycast;</span><br><span class="line">        m_RaycastResultCache.Clear()</span><br><span class="line">        <span class="keyword">var</span> temp = eventData.pointerCurrentRaycast.gameObject;</span><br><span class="line">        HandlePointerExitAndEnter(eventData, temp);</span><br><span class="line">        m_rayCastDelayFrame = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UGUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity2020 Graphic 小坑</title>
    <url>/2021/08/31/20210831-raycast-padding/</url>
    <content><![CDATA[<p>最近项目升级了2020.3，Graphic这边多给了一个Raycast Padding的设置。<br>我们有在用一些完全空白的图片来接受UI的点击响应，同时也有一些用图片接收点击的按钮。</p>
<p>但很坑爹的是，我发现无论怎么设置Raycast Padding的值，场景预览中都没有显示框框，所以我其实是完全不知道这玩意儿到底怎么用的。<br>搜索一下才知道原来是padding的数值是负数的时候才是往外扩张。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RaycastTarget</span> : <span class="title">Graphic</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Additionally, If you need a Raycast target that is not a rectangle, you can implement bool Raycast(Vector2 sp, Camera eventCamera) method from Graphic.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetMaterialDirty</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetVerticesDirty</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Probably not necessary since the chain of calls `Rebuild()`-&gt;`UpdateGeometry()`-&gt;`DoMeshGeneration()`-&gt;`OnPopulateMesh()` won't happen; so here really just as a fail-safe.</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnPopulateMesh</span>(<span class="params">VertexHelper vh</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        vh.Clear();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDrawGizmos</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.enabled)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        RectTransform rectTransform = <span class="keyword">this</span>.transform <span class="keyword">as</span> RectTransform;</span><br><span class="line">        Color wireColor = Color.yellow;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isActiveAndEnabled)</span><br><span class="line">            wireColor.a *= <span class="number">0.7f</span></span><br><span class="line">        <span class="comment">// Padding to be applied to the masking</span></span><br><span class="line">        <span class="comment">// X = Left, Y = Bottom, Z = Right, W = Top</span></span><br><span class="line">        <span class="comment">// if you wanna make it bigger, then the all value shouble be negative</span></span><br><span class="line">        Vector4 padding = <span class="keyword">this</span>.raycastPadding * <span class="number">-1.0f</span>;</span><br><span class="line">        Matrix4x4 localToWorld = rectTransform.localToWorldMatrix</span><br><span class="line">        Vector3 topLeft = SomeUtils.GetOffsetLocalPosition(rectTransform, SomeUtils.UIOffsetType.TopLeft);</span><br><span class="line">        Vector3 topRight = SomeUtils.GetOffsetLocalPosition(rectTransform, SomeUtils.UIOffsetType.TopRight);</span><br><span class="line">        Vector3 bottomLeft = SomeUtils.GetOffsetLocalPosition(rectTransform, SomeUtils.UIOffsetType.BottomLeft);</span><br><span class="line">        Vector3 bottomRight = SomeUtils.GetOffsetLocalPosition(rectTransform, SomeUtils.UIOffsetType.BottomRight)</span><br><span class="line">        topLeft = localToWorld.MultiplyPoint(topLeft + (Vector3.left * padding.x) + (Vector3.up * padding.w));</span><br><span class="line">        topRight = localToWorld.MultiplyPoint(topRight + (Vector3.right * padding.z) + (Vector3.up * padding.w));</span><br><span class="line">        bottomLeft = localToWorld.MultiplyPoint(bottomLeft + (Vector3.left * padding.x) + (Vector3.down * padding.y));</span><br><span class="line">        bottomRight = localToWorld.MultiplyPoint(bottomRight + (Vector3.right * padding.z) + (Vector3.down * padding.y))</span><br><span class="line">        Color tempColor = Gizmos.color;</span><br><span class="line">        Gizmos.color = wireColor</span><br><span class="line">        Gizmos.DrawLine(topLeft, topRight);</span><br><span class="line">        Gizmos.DrawLine(topLeft, bottomLeft);</span><br><span class="line">        Gizmos.DrawLine(bottomRight, topRight);</span><br><span class="line">        Gizmos.DrawLine(bottomRight, bottomLeft);</span><br><span class="line">        Gizmos.color = tempColor</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>空白raycast target的可以在Gizmo里画，但是Image本身的不是那么好画，因为无法直接覆写原本的Editor。<br>一个笨办法就是做一个自己的Iamge然后也在Gizmo里画。<br>但其实这个是Graphic的property 不知道怎么做通用解决方案。</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UGUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Games101 作业windows环境配置</title>
    <url>/2021/10/04/20211004-games101-env/</url>
    <content><![CDATA[<p>终于开始学习 Games101了。除了听课以外还想做他的作业多巩固一下。</p>
<p>但我实在是不想用虚拟机(菜，想调试)，所以想整个windows这边的环境。<br>最开始按照一些教程配Cmake啥的，结果作业1编译就疯狂报错实在受不了。群友推荐了 vcpkg+vs 俺马上来试试。</p>
<h1 id="vcpkg"><a href="#vcpkg" class="headerlink" title="vcpkg"></a>vcpkg</h1><p><a href="https://github.com/microsoft/vcpkg/blob/master/README_zh_CN.md" target="_blank" rel="noopener">https://github.com/microsoft/vcpkg/blob/master/README_zh_CN.md</a></p>
<p>安装并不难，找到了官方的简中手册，照着跑一轮就行。</p>
<h1 id="安装作业依赖包"><a href="#安装作业依赖包" class="headerlink" title="安装作业依赖包"></a>安装作业依赖包</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># install latest packages :D</span></span><br><span class="line">.\vcpkg.exe install opencv:x64-windows</span><br><span class="line">.\vcpkg.exe install eigen3:x64-windows</span><br><span class="line"></span><br><span class="line"><span class="comment"># install for all users</span></span><br><span class="line">vcpkg integrate install</span><br></pre></td></tr></table></figure>
<p>结果这个时候遇到了个天坑，eigen3这边的gitlab 仓库跑路了(不是)。</p>
<img src="/2021/10/04/20211004-games101-env/20211004-pic000.png" class="" title="split">
<p><a href="https://gitlab.com/libeigen/eigen/-/issues/2336" target="_blank" rel="noopener">https://gitlab.com/libeigen/eigen/-/issues/2336</a></p>
<p>于是乎去暂存的仓库下载源码，然后放进 “vcpkg\downloads” 中，在执行之前的安装命令就好了</p>
<p><a href="https://gitlab.com/cantonios/eigen/-/tree/3.3.9" target="_blank" rel="noopener">https://gitlab.com/cantonios/eigen/-/tree/3.3.9</a></p>
<h1 id="作业框架设置"><a href="#作业框架设置" class="headerlink" title="作业框架设置"></a>作业框架设置</h1><p>我是自己NEW了一个C++的空vs工程，把作业代码都丢进去。</p>
<p>目标平台选择x64</p>
<p>右键 项目 属性 -&gt; c/c++ -&gt; 语言 -&gt; c++ 标准这边选择 c++17 (作业要求)</p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity UGUI 简单循环滚动列表</title>
    <url>/2022/03/13/20220313-recycle-grid-scrollview/</url>
    <content><![CDATA[<p>之前做了一个自带简单 GridLayout 的循环滚动列表。但是基于继承的思路做的。导师指出了其不便指出，而且Unity其实是比较提倡大家使用组合模式的，所以我决定修改一下。</p>
<h1 id="循环滚动"><a href="#循环滚动" class="headerlink" title="循环滚动"></a>循环滚动</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>和在网上能搜索到的大多数循环滚动列表一样，我有一个空的 Content，调整其尺寸来模拟列表的滚动，再根据滚动的当前位置在视口里把UI组件都摆放好。</p>
<p>我需要使用Unity自带的滚动视外，并且我还定义了简单的 ListElement, ListView, ScrollrectController 这三个类。</p>
<p>ListElement 就是实际需要被操作的列表组件，这个组件负责提供 RectTransform 和一个 index， 保证其能被我的 ScrollrectController 操作。</p>
<p>ListView 负责管理 ListElement，生成销魂都可以。同时还提供直接拿取所有 ListElement 的接口。</p>
<p>ScrollrectController 持有 ListView，并且根据用户传入的一个数据个数来进行循环滚动的管理。同时有事件告知每次的布局刷新的完成。</p>
<p>为了方便，我还做了一个比较简单的 GridLayout 给 ScrollrectController 控制。</p>
<p>至于视图内的最大可视条目数，老实说我感觉我没有特别好的方法去计算一个准确的值。所以就按着 (row + 2) <em> (column </em> 2) 来计算了，虽然有一点浪费内存，但在我当前设置的滚动速度下是够用的。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TempListElementUI</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Header(<span class="meta-string">"must have"</span>), Tooltip(<span class="meta-string">"should inherit from ISetupable"</span>)</span>]</span><br><span class="line">    [<span class="meta">SerializeField</span>]</span><br><span class="line">    Component m_dataReceiver;</span><br><span class="line">    [<span class="meta">SerializeField, Tooltip(<span class="meta-string">"better to manual drag it in"</span>)</span>]</span><br><span class="line">    RectTransform m_elementTransform;</span><br><span class="line">    [<span class="meta">SerializeField, ReadOnly</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m_index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ElementIndex =&gt; m_index;</span><br><span class="line">    <span class="keyword">public</span> RectTransform ElementRectTransform</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m_elementTransform == <span class="literal">null</span>)</span><br><span class="line">                m_elementTransform = GetComponent&lt;RectTransform&gt;();</span><br><span class="line">            <span class="keyword">return</span> m_elementTransform;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> Setup&lt;TData&gt;(TData data)</span><br><span class="line">    &#123;</span><br><span class="line">        SomeUtils.ISetup&lt;Component, TData&gt;(m_dataReceiver, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.gameObject.activeSelf)</span><br><span class="line">            <span class="keyword">this</span>.gameObject.SetActive(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Hide</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.gameObject.activeSelf)</span><br><span class="line">            <span class="keyword">this</span>.gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetIndex</span>(<span class="params"><span class="keyword">int</span> index</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        m_index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_elementTransform == <span class="literal">null</span>)</span><br><span class="line">            m_elementTransform = <span class="keyword">this</span>.transform <span class="keyword">as</span> RectTransform;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Reset</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        m_elementTransform = <span class="keyword">this</span>.transform <span class="keyword">as</span> RectTransform;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TempListView</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">// check when prefab change</span></span><br><span class="line">    <span class="comment">// [OnValueChanged("OnPrefabChanged")]</span></span><br><span class="line">    [<span class="meta">SerializeField, Header(<span class="meta-string">"place holder, the listview should only contains one type of element"</span>)</span>]</span><br><span class="line">    TempListElementUI m_elementPrefab;</span><br><span class="line">    RectTransform Container =&gt; transform <span class="keyword">as</span> RectTransform;</span><br><span class="line">    [<span class="meta">SerializeField, ReadOnly</span>]</span><br><span class="line">    List&lt;TempListElementUI&gt; m_actualUsedComponents = <span class="keyword">new</span> List&lt;TempListElementUI&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Count =&gt; m_actualUsedComponents.Count;</span><br><span class="line">    <span class="keyword">public</span> TempListElementUI <span class="keyword">this</span>[<span class="keyword">int</span> index] =&gt; m_actualUsedComponents[index];</span><br><span class="line">    <span class="keyword">public</span> IReadOnlyList&lt;TempListElementUI&gt; ElementList =&gt; m_actualUsedComponents;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TempListElementUI <span class="title">Add</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        TempListElementUI element = InternalAdd();</span><br><span class="line">        m_actualUsedComponents.Add(element);</span><br><span class="line">        element.Show();</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        TempListElementUI element = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (m_actualUsedComponents.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            element = m_actualUsedComponents[m_actualUsedComponents.Count - <span class="number">1</span>];</span><br><span class="line">            m_actualUsedComponents.RemoveAt(m_actualUsedComponents.Count - <span class="number">1</span>);</span><br><span class="line">            InternalRemove(element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">TempListElementUI instance</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_actualUsedComponents.Remove(instance))</span><br><span class="line">        &#123;</span><br><span class="line">            instance.Hide();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">$"listview_<span class="subst">&#123;<span class="keyword">this</span>.gameObject.name&#125;</span> does not contains <span class="subst">&#123;instance.ElementRectTransform.name&#125;</span>, remove failed"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveAt</span>(<span class="params"><span class="keyword">int</span> index</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= m_actualUsedComponents.Count)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">$"<span class="subst">&#123;index&#125;</span> is invalid for SimpleListView"</span>, <span class="keyword">this</span>.gameObject);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TempListElementUI toRemove = m_actualUsedComponents[index];</span><br><span class="line">        m_actualUsedComponents.RemoveAt(index);</span><br><span class="line">        InternalRemove(toRemove);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InnerSwap</span>(<span class="params"><span class="keyword">int</span> indexA, <span class="keyword">int</span> indexB</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (indexA &lt; <span class="number">0</span> || indexA &gt; m_actualUsedComponents.Count - <span class="number">1</span> || indexB &lt; <span class="number">0</span> || indexB &gt; m_actualUsedComponents.Count - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TempListElementUI temp = m_actualUsedComponents[indexA];</span><br><span class="line">        <span class="keyword">int</span> transformIndexA = temp.ElementRectTransform.GetSiblingIndex();</span><br><span class="line">        <span class="keyword">int</span> transformIndexB = m_actualUsedComponents[indexB].ElementRectTransform.GetSiblingIndex();</span><br><span class="line">        m_actualUsedComponents[indexA] = m_actualUsedComponents[indexB];</span><br><span class="line">        m_actualUsedComponents[indexB] = temp;</span><br><span class="line">        m_actualUsedComponents[indexA].ElementRectTransform.SetSiblingIndex(transformIndexA);</span><br><span class="line">        m_actualUsedComponents[indexB].ElementRectTransform.SetSiblingIndex(transformIndexB);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>-1 means element is not in the list<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">IndexOf</span>(<span class="params">TempListElementUI instance</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_actualUsedComponents.IndexOf(instance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ArgumentOutOfRangeException)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> TempListElementUI <span class="title">InternalAdd</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// can apply object pool here</span></span><br><span class="line">        <span class="keyword">if</span> (Application.isEditor &amp;&amp; !Application.isPlaying)</span><br><span class="line">            <span class="keyword">return</span> UnityEditor.PrefabUtility.InstantiatePrefab(m_elementPrefab, Container) <span class="keyword">as</span> TempListElementUI;</span><br><span class="line">        <span class="keyword">return</span> Instantiate(m_elementPrefab, Container);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">InternalRemove</span>(<span class="params">TempListElementUI element</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// can apply object pool here</span></span><br><span class="line">        <span class="keyword">if</span> (element == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        element.Hide();</span><br><span class="line">        <span class="keyword">if</span> (Application.isEditor &amp;&amp; !Application.isPlaying)</span><br><span class="line">            GameObject.DestroyImmediate(element.ElementRectTransform.gameObject);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            GameObject.Destroy(element.ElementRectTransform.gameObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTransformChildrenChanged</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Application.isEditor &amp;&amp; !Application.isPlaying)</span><br><span class="line">            FindPrefabInstances();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnPrefabChanged</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">// remove pre objects</span></span><br><span class="line">        <span class="keyword">int</span> amount = m_actualUsedComponents.Count;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_actualUsedComponents.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            GameObject.DestroyImmediate(m_actualUsedComponents[i].ElementRectTransform.gameObject);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_elementPrefab != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; amount; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                RectTransform rectTransform = (RectTransform)UnityEditor.PrefabUtility.InstantiatePrefab(m_elementPrefab, Container);</span><br><span class="line">                m_actualUsedComponents[i] = (rectTransform.GetComponent&lt;TempListElementUI&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_actualUsedComponents.Clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Retrieves prefab instances in the transform</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">ContextMenu(<span class="meta-string">"find prefab instances"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FindPrefabInstances</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">bool</span> hasPrefab = !(m_elementPrefab == <span class="literal">null</span>);</span><br><span class="line">        TempListElementUI elementPrefab = m_elementPrefab.GetComponent&lt;TempListElementUI&gt;();</span><br><span class="line">        m_actualUsedComponents.Clear();</span><br><span class="line">        List&lt;GameObject&gt; toDeleteObjectList = <span class="keyword">new</span> List&lt;GameObject&gt;();</span><br><span class="line">        <span class="keyword">foreach</span> (Transform child <span class="keyword">in</span> Container)</span><br><span class="line">        &#123;</span><br><span class="line">            TempListElementUI childElement = child.GetComponent&lt;TempListElementUI&gt;();</span><br><span class="line">            <span class="keyword">if</span> (childElement == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                toDeleteObjectList.Add(child.gameObject);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (hasPrefab)</span><br><span class="line">            &#123;</span><br><span class="line">                GameObject detectPrefabGo = UnityEditor.PrefabUtility.GetCorrespondingObjectFromSource(child.gameObject);</span><br><span class="line">                TempListElementUI detectPrefab = (detectPrefabGo == <span class="literal">null</span>) ? <span class="literal">null</span> : detectPrefabGo.GetComponent&lt;TempListElementUI&gt;();</span><br><span class="line">                <span class="keyword">if</span> (elementPrefab == detectPrefab)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// same source prefab</span></span><br><span class="line">                    m_actualUsedComponents.Add(childElement);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// different source prefab, delete this one</span></span><br><span class="line">                    toDeleteObjectList.Add(child.gameObject);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (UnityEditor.PrefabUtility.IsAnyPrefabInstanceRoot(child.gameObject))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// find the first prefab</span></span><br><span class="line">                GameObject prefab = UnityEditor.PrefabUtility.GetCorrespondingObjectFromSource(child.gameObject);</span><br><span class="line">                m_elementPrefab = prefab.GetComponent&lt;TempListElementUI&gt;();</span><br><span class="line">                m_actualUsedComponents.Add(childElement);</span><br><span class="line">                hasPrefab = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; toDeleteObjectList.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Application.isPlaying)</span><br><span class="line">                GameObject.Destroy(toDeleteObjectList[i]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                GameObject.DestroyImmediate(toDeleteObjectList[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">ContextMenu(<span class="meta-string">"editor time add"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">EditorTimeAdd</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Application.isPlaying) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (m_elementPrefab == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">"listview is missing element prefab"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TempListElementUI spawnObject = (TempListElementUI)UnityEditor.PrefabUtility.InstantiatePrefab(m_elementPrefab, Container);</span><br><span class="line">        m_actualUsedComponents.Add(spawnObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">ContextMenu(<span class="meta-string">"editor time clear"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">EditorTimeClear</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Application.isPlaying) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// remove pre objects</span></span><br><span class="line">        TempListElementUI[] preObjects = Container.GetComponentsInChildren&lt;TempListElementUI&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; preObjects.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            GameObject.DestroyImmediate(preObjects[i].ElementRectTransform.gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">        m_actualUsedComponents.Clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">ContextMenu(<span class="meta-string">"test print elements"</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TestPrintListElements</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_actualUsedComponents != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            StringBuilder printText = <span class="keyword">new</span> StringBuilder(<span class="string">$"temp list view children_<span class="subst">&#123;m_actualUsedComponents.Count&#125;</span> :\n"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_actualUsedComponents.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                printText.AppendLine(m_actualUsedComponents[i].ElementRectTransform.name);</span><br><span class="line">            &#125;</span><br><span class="line">            Debug.Log(printText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BoundlessScrollRectController</span> : <span class="title">UIBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    too much code, I will just show the draw</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawContentItem</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        IReadOnlyList&lt;TempListElementUI&gt; elementList = ElementList;</span><br><span class="line">        <span class="keyword">int</span> dataCount = m_simulatedDataCount;</span><br><span class="line">        <span class="comment">// TODO @Hiko use a general calculation later</span></span><br><span class="line">        <span class="keyword">bool</span> test = m_content.anchorMin != Vector2.up || m_content.anchorMax != Vector2.up || m_content.pivot != Vector2.up;</span><br><span class="line">        <span class="keyword">if</span> (test)</span><br><span class="line">        &#123;</span><br><span class="line">            m_content.anchorMin = Vector2.up;</span><br><span class="line">            m_content.anchorMax = Vector2.up;</span><br><span class="line">            m_content.pivot = Vector2.up;</span><br><span class="line">        &#125;</span><br><span class="line">        Vector3 dragContentAnchorPostion = m_content.anchoredPosition;</span><br><span class="line">        Vector3 contentMove = dragContentAnchorPostion - SomeUtils.GetOffsetLocalPosition(m_content, SomeUtils.UIOffsetType.TopLeft);</span><br><span class="line">        Vector2 itemSize = m_gridLayoutGroup.CellSize, spacing = m_gridLayoutGroup.Spacing;</span><br><span class="line"></span><br><span class="line">        RectOffset padding = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != m_gridLayoutGroup)</span><br><span class="line">            padding = m_gridLayoutGroup.RectPadding;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// need to know the moving direction, then adjust it to prevent wrong draw</span></span><br><span class="line">        <span class="keyword">float</span> xMove = contentMove.x &lt; <span class="number">0</span> ? (-contentMove.x - padding.horizontal) : <span class="number">0</span>;</span><br><span class="line">        xMove = Mathf.Clamp(xMove, <span class="number">0.0f</span>, Mathf.Abs(xMove));</span><br><span class="line">        <span class="keyword">float</span> yMove = contentMove.y &gt; <span class="number">0</span> ? (contentMove.y - padding.vertical) : <span class="number">0</span>;</span><br><span class="line">        yMove = Mathf.Clamp(yMove, <span class="number">0.0f</span>, Mathf.Abs(yMove));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the column index of the top left item</span></span><br><span class="line">        <span class="keyword">int</span> tempColumnIndex = Mathf.FloorToInt((xMove + spacing.x) / (itemSize.x + spacing.x));</span><br><span class="line">        <span class="keyword">if</span> (xMove % (itemSize.x + spacing.x) - itemSize.x &gt; spacing.x)</span><br><span class="line">            tempColumnIndex = Mathf.Clamp(tempColumnIndex - <span class="number">1</span>, <span class="number">0</span>, tempColumnIndex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the row index of the top left item</span></span><br><span class="line">        <span class="keyword">int</span> tempRowIndex = Mathf.FloorToInt((yMove + spacing.y) / (itemSize.y + spacing.y));</span><br><span class="line">        <span class="keyword">if</span> (yMove % (itemSize.y + spacing.y) - itemSize.y &gt; spacing.y)</span><br><span class="line">            tempRowIndex = Mathf.Clamp(tempRowIndex - <span class="number">1</span>, <span class="number">0</span>, tempRowIndex);</span><br><span class="line"></span><br><span class="line">        Vector2Int rowTopLeftItemIndex = <span class="keyword">new</span> Vector2Int(tempRowIndex, tempColumnIndex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> rowDataCount = <span class="number">0</span>, columnDataCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (BoundlessGridLayoutData.Constraint.FixedColumnCount == m_gridLayoutGroup.constraint)</span><br><span class="line">        &#123;</span><br><span class="line">            rowDataCount = m_gridLayoutGroup.constraintCount;</span><br><span class="line">            columnDataCount = Mathf.CeilToInt((<span class="keyword">float</span>)dataCount / rowDataCount);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            columnDataCount = m_gridLayoutGroup.constraintCount;</span><br><span class="line">            rowDataCount = Mathf.CeilToInt((<span class="keyword">float</span>)dataCount / columnDataCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// x -&gt; element amount on horizontal axis</span></span><br><span class="line">        <span class="comment">// y -&gt; element amount on vertical axis</span></span><br><span class="line">        Vector2Int contentRowColumnSize = <span class="keyword">new</span> Vector2Int(rowDataCount, columnDataCount);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// deal with content from left to right (simple case)</span></span><br><span class="line">        <span class="keyword">int</span> dataIndex = <span class="number">0</span>, uiItemIndex = <span class="number">0</span>;</span><br><span class="line">        Vector3 rowTopLeftPosition = <span class="keyword">new</span> Vector3(padding.left, -padding.top, <span class="number">0.0f</span>), itemTopLeftPosition = Vector3.zero;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> columnIndex = <span class="number">0</span>; columnIndex &lt; m_viewItemCountInColumn; columnIndex++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (columnIndex + rowTopLeftItemIndex.x == columnDataCount)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            rowTopLeftPosition = <span class="keyword">new</span> Vector3(padding.left, -padding.top, <span class="number">0.0f</span>) + Vector3.down * (columnIndex + rowTopLeftItemIndex.x) * (itemSize.y + spacing.y);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> rowIndex = <span class="number">0</span>; rowIndex &lt; m_viewItemCountInRow; rowIndex++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (rowIndex + rowTopLeftItemIndex.y == rowDataCount)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                Vector2Int elementIndex = <span class="keyword">new</span> Vector2Int(rowIndex + rowTopLeftItemIndex.y, columnIndex + rowTopLeftItemIndex.x);</span><br><span class="line">                dataIndex = CaculateDataIndex(elementIndex, contentRowColumnSize, GridLayoutData.startAxis, GridLayoutData.startCorner);</span><br><span class="line">                itemTopLeftPosition = rowTopLeftPosition + Vector3.right * (rowIndex + rowTopLeftItemIndex.y) * (itemSize.x + spacing.x);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// TODO @Hiko avoid overdraw</span></span><br><span class="line">                <span class="keyword">if</span> (uiItemIndex &gt; <span class="number">0</span> &amp;&amp; elementList[uiItemIndex - <span class="number">1</span>].ElementIndex == dataIndex)</span><br><span class="line">                    <span class="keyword">continue</span>; <span class="comment">// over draw case</span></span><br><span class="line">                <span class="keyword">if</span> (dataIndex &gt; <span class="number">-1</span> &amp;&amp; dataIndex &lt; dataCount)</span><br><span class="line">                &#123;</span><br><span class="line">                    elementList[uiItemIndex].ElementRectTransform.localPosition = itemTopLeftPosition;</span><br><span class="line">                    elementList[uiItemIndex].SetIndex(dataIndex);</span><br><span class="line">                    elementList[uiItemIndex].Show();</span><br><span class="line">                    uiItemIndex++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (uiItemIndex &lt; elementList.Count)</span><br><span class="line">        &#123;</span><br><span class="line">            elementList[uiItemIndex].SetIndex(<span class="number">-1</span>);</span><br><span class="line">            elementList[uiItemIndex].Hide();</span><br><span class="line">            elementList[uiItemIndex].ElementRectTransform.position = Vector3.zero;</span><br><span class="line">            uiItemIndex++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        NotifyOnContentItemFinishDrawing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样写可以保证我的这个循环滚动的逻辑与实际的UI需要显示的逻辑尽可能地分开。需要使用循环滚动功能的时候，再添加这些组件即可。</p>
<img src="/2022/03/13/20220313-recycle-grid-scrollview/20210131-scrollrect01.gif" class="" title="split">
<h1 id="配合实际显示组件使用"><a href="#配合实际显示组件使用" class="headerlink" title="配合实际显示组件使用"></a>配合实际显示组件使用</h1><p>在滚动视图摆放好位置后，我们可以通过 ListElement 提供的索引知道其对应数据集里数据索引。所以需要使用这个滚动视图的UI，要同时管理 ListView 和 ScrollrectController。</p>
<p>我整了一个接口和一个扩展方法，用于显示数据的UI组件需要继承这个接口。因为按照我的写法，从 ListView 中只能拿到 ListElement 没法拿到实际用于表现的 UI 组件。但是通过这个接口和 ListElement 中的一个泛型方法就可以把内容传进去。虽然需要做一次类型检查，但也应该还好。毕竟不需要GetComponent也不需要单独维护一个关于实际显示组件的数组，用起来还是挺方便的呀。</p>
<p>除此之外比较坑的就是这样写导致 Unity 的 Component 都能调用这个Setup的方法，还挺危险的，所以加了个注释。实际使用的时候一定记得让用于表现的 UI 组件继承这个接口。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// apply this on the target shows actual data</span></span><br><span class="line">public interface ISetupable&lt;TData&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Setup</span>(<span class="params">TData data</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> target component should inherit from ISetupable</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="component"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="data"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name="TData"&gt;</span><span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> ISetup&lt;TComponent, TData&gt;(<span class="keyword">this</span> Component component, TData data) <span class="keyword">where</span> TComponent : Component</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// I guess this check should be fine  :(</span></span><br><span class="line">    <span class="keyword">if</span> (component <span class="keyword">is</span> ISetupable&lt;TData&gt; target)</span><br><span class="line">    &#123;</span><br><span class="line">        target.Setup(data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    UnityEngine.Debug.LogError(<span class="string">$"component_<span class="subst">&#123;component.name&#125;</span> is not a setupable"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实这个功能丢尽项目里后用的地方不是特别多，所以都是隔几个月修一下，每次都要看自己写的垃圾代码好久，属实头痛了。<br>总算是用起来比以前方便不少了。接下来就把一些小问题修一修好了。</p>
<p>回头再看已经和自己做的那个初版完全不一样了，个人认为思路比以前那个好多了。</p>
<p>全部代码：<br><a href="https://github.com/2C2C2C/MuyScrollRect" target="_blank" rel="noopener">https://github.com/2C2C2C/MuyScrollRect</a></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UGUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity InputSystem 简单保存按键rebind</title>
    <url>/2022/04/05/20220404-input-sys-save-rebind-01/</url>
    <content><![CDATA[<p>Unity 的 InputSystem 正式发布也好一段时间了。本来这边也想自己做一套输入处理但是看 Unity 这个官方的还挺方便就打算直接用。</p>
<h1 id="InputAction"><a href="#InputAction" class="headerlink" title="InputAction"></a>InputAction</h1><p>说下我对这个 InputAction 的简单理解。</p>
<p>InputAction</p>
<pre><code>- Composite
    - Binding
- Binding
</code></pre><ul>
<li>Interaction</li>
<li>Processor</li>
</ul>
<p>InputAction 是定义的最上层的交互事件，我认为他是直接和 gameplay 层面交互的，提供响应事件和输入设备的数据(比如鼠标的位置，或是线性按钮的数值)</p>
<p>Binding 是具体到输入设备上按键，线性输入的一个数据结构</p>
<p>Composite 是把 Binding 提供的直接输入数据处理成我们想要的数据并提供给 InputAction。</p>
<p>另外两个可以应用于InputAction，Composite 和 Binding 的组件</p>
<p>Interaction 是用来规定当前的 输入/行为 触发的机制。</p>
<p>Processor 是用来对当前的输入数据做追加处理的。</p>
<h1 id="rebind"><a href="#rebind" class="headerlink" title="rebind"></a>rebind</h1><p>我在官方的tank example中做的 rebind save</p>
<p>对于简单的 Button Action 里的 Binding, rebind 的时候我们是追加了 OverridePath 给这个 Button Action 下面的 Binding。</p>
<p>Path 是一个字符串, 大概是这样的 “<Gamepad>/buttonSouth”。 里面包含了输入设备类型和具体的按钮名。(其实我觉得， <Gamepad> 这样的文本可以提供成一个Const string ，会好用很多)</p>
<p>对于简单的 rebind 存储，我们只需要找到所有的 Binding 里的 override path 保存下来，下次启动游戏加载了原本的 Action Map 之后再把 Override Path 给赋值上去。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">InputBindSaveHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span> s_keyMappingPreferKey = <span class="string">"KeyMapping"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SaveActionMapRebinding</span>(<span class="params">InputActionMap actionMap</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Dictionary&lt;Guid, <span class="keyword">string</span>&gt; overridedActionPathDict = <span class="keyword">new</span> Dictionary&lt;Guid, <span class="keyword">string</span>&gt;();</span><br><span class="line">        UnityEngine.InputSystem.Utilities.ReadOnlyArray&lt;InputAction&gt; actions = actionMap.actions;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; actions.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            InputAction action = actions[i];</span><br><span class="line">            UnityEngine.InputSystem.Utilities.ReadOnlyArray&lt;InputBinding&gt; actionBindings = action.bindings;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; actionBindings.Count; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                InputBinding actionBinding = actionBindings[j];</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(actionBinding.overridePath))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                overridedActionPathDict.Add(actionBinding.id, actionBinding.overridePath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BinaryFormatter binFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">        MemoryStream mStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">        binFormatter.Serialize(mStream, overridedActionPathDict);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] byteArr = mStream.ToArray();</span><br><span class="line">        <span class="comment">// idk why [Encoding.UTF8.GetString()] just doesnt work</span></span><br><span class="line">        <span class="keyword">string</span> encodingString = Convert.ToBase64String(byteArr, Base64FormattingOptions.InsertLineBreaks);</span><br><span class="line">        PlayerPrefs.SetString(s_keyMappingPreferKey, encodingString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LoadActionMapRebinding</span>(<span class="params">InputActionMap actionMap</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">string</span> encodingString = PlayerPrefs.GetString(s_keyMappingPreferKey);</span><br><span class="line">        <span class="keyword">byte</span>[] byteArr = Convert.FromBase64String(encodingString);</span><br><span class="line"></span><br><span class="line">        BinaryFormatter binFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">        MemoryStream mStream = <span class="keyword">new</span> MemoryStream(byteArr);</span><br><span class="line">        Dictionary&lt;Guid, <span class="keyword">string</span>&gt; rebindSavePairDict = binFormatter.Deserialize(mStream) <span class="keyword">as</span> Dictionary&lt;Guid, <span class="keyword">string</span>&gt;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rebindSavePairDict != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            UnityEngine.InputSystem.Utilities.ReadOnlyArray&lt;InputAction&gt; actions = actionMap.actions;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; actions.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                InputAction action = actions[i];</span><br><span class="line">                UnityEngine.InputSystem.Utilities.ReadOnlyArray&lt;InputBinding&gt; actionBindings = action.bindings;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; actionBindings.Count; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    InputBinding actionBinding = actionBindings[j];</span><br><span class="line">                    <span class="comment">// override</span></span><br><span class="line">                    <span class="keyword">if</span> (rebindSavePairDict.ContainsKey(actionBinding.id))</span><br><span class="line">                    &#123;</span><br><span class="line">                        actionBinding.overridePath = rebindSavePairDict[actionBinding.id];</span><br><span class="line">                        action.ApplyBindingOverride(actionBinding);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当前因为项目里的存档相关的功能还没做完，结构还没定下来，所以我只能把 rebind 存在PlayerPrefs里。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我也只是大概看了一下 Unity 的这个 InputSystem，没有很深的去使用。但是初步上手的时候就感觉他的封装和扩展性对于那些操作要求不高的游戏是已经够用的了。<br>比较麻烦的一个点就是他的 Interaction, Processor 和 Binding 的覆盖全都需要用 string。直接写的 string 会非常不方便，估计使用者得自己总结一些其常用的 const string 写进变量直接调用。<br>这样才能比较好的维持代码可读性。</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Odin CustomValueDrawer 小坑</title>
    <url>/2022/04/16/20220416-odin-custom-value-drawer/</url>
    <content><![CDATA[<p>为了方便策划在 scriptable object 上配置我们的任务以及事件相关的文本，我做了一个简单的 struct 。里面包含了 I2 的 Lockey 和一个参数数组。<br>既然要方便策划配置，那肯定要做一个简单的预览，这样策划就能知道自己配置的文本参数是否正确。</p>
<p>既然要做预览，那肯定得得自己复写一下他的 property drawer了。对一个字段的编辑器绘制重写有两种方式，一种是继承 OdinValueDrawer class， 还有一种是 CustomValueDrawer Attribute.</p>
<p><a href="https://odininspector.com/tutorials/how-to-create-custom-drawers-using-odin/how-to-create-a-custom-value-drawer" target="_blank" rel="noopener">https://odininspector.com/tutorials/how-to-create-custom-drawers-using-odin/how-to-create-a-custom-value-drawer</a><br><a href="https://odininspector.com/attributes/custom-value-drawer-attribute" target="_blank" rel="noopener">https://odininspector.com/attributes/custom-value-drawer-attribute</a></p>
<h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><p>我定义的结构是这样的。</p>
<p>在默认情况下他已经能在 inspector上画出我的 Lockey 和我的参数数组。<br>因为考虑到给整个结构做 OdinValueDrawer 需要自己画数组有点麻烦，所以我选择用 CustomValueDrawer 只重新画 LocalizedString。</p>
<p>LocalizedString 的重画我直接照搬了同事的，但是我发现了一个非常奇怪的问题。</p>
<p>我创建了一个下拉选框，然后在用户选中一个新的 lockey 的时候我对结构体中的 lockey 进行更新。但我发现在下拉选框的选中事件触发后进行赋值，绘制完成再返回新的结构，得到的是没有被更改的结果。<br>但是同样的绘制代码，在 OdinValueDrawer 中却能得到正确的结果！！！CustomValueDrawer 和 OdinValueDrawer 的原理是不一样的。</p>
<p>OdinValueDrawer 就是相当于一个更先进的 Property Drawer, 在这个绘制器里是可以获取到原本的实际的字段值的。</p>
<p>CustomValueDrawer 则像是一个函数，里面包含了绘制的方法，但是不能够直接操作原本的字段，需要最后把你更新到的值返回出去，这才能够赋值给实际的那个字段。</p>
<p>代码给出，有问题的地方使用注释标明了。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> LocalizationStringParmPack</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">CustomValueDrawer(<span class="meta-string">"DrawPreviewText"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> LocalizedString TextLoc;</span><br><span class="line">    <span class="keyword">public</span> LocalizationParamsManager.ParamValue[] ParmsArray;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">ToString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.GetRawEnglishString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> GUIStyle m_previewStyle;</span><br><span class="line">    <span class="keyword">static</span> GUIStyle PreviewStyle</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m_previewStyle == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_previewStyle = <span class="keyword">new</span> GUIStyle(EditorStyles.textArea);</span><br><span class="line">                m_previewStyle.wordWrap = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> m_previewStyle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// use hacky stuff to get selected new lockey</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">string</span> s_wtfKey = <span class="keyword">string</span>.Empty;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> s_hasChanged = <span class="literal">false</span>;</span><br><span class="line">    <span class="function">LocalizedString <span class="title">DrawPreviewText</span>(<span class="params">LocalizedString <span class="keyword">value</span>, GUIContent label</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">new</span> EditorGUILayout.VerticalScope(UnityEditor.EditorStyles.helpBox))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// draw lockey</span></span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">new</span> EditorGUILayout.HorizontalScope())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (label != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    EditorGUILayout.LabelField(label, GUILayout.Width(EditorGUIUtility.labelWidth));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// weird stuff happin in dropdown</span></span><br><span class="line">                <span class="keyword">if</span> (EditorGUILayout.DropdownButton(<span class="keyword">new</span> GUIContent(<span class="keyword">value</span>.mTerm), FocusType.Keyboard))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> terms = LocalizationManager.GetTermsList();</span><br><span class="line">                    <span class="keyword">var</span> selector = <span class="keyword">new</span> GenericSelector&lt;<span class="keyword">string</span>&gt;(<span class="string">"Select Term"</span>, terms);</span><br><span class="line">                    selector.EnableSingleClickToSelect();</span><br><span class="line">                    selector.SelectionConfirmed += s =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (s.Any())</span><br><span class="line">                        &#123;</span><br><span class="line">                            s_wtfKey = s.First();</span><br><span class="line">                            <span class="comment">// WEIRD STUFF HERE</span></span><br><span class="line">                            <span class="comment">/* if I do  </span></span><br><span class="line"><span class="comment">                            LocalizedString next = new LocalizedString(s.First());</span></span><br><span class="line"><span class="comment">                            and return 'next' and the end of method, it just doesnt work!!!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                            cuz the GenericSelector is actually a editor window, and</span></span><br><span class="line"><span class="comment">                            */</span></span><br><span class="line">                            s_hasChanged = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    selector.ShowInPopup();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> mask = (<span class="keyword">value</span>.mRTL_IgnoreArabicFix ? <span class="number">0</span> : <span class="number">1</span>) +</span><br><span class="line">                           (<span class="keyword">value</span>.mRTL_ConvertNumbers ? <span class="number">0</span> : <span class="number">2</span>) +</span><br><span class="line">                           (<span class="keyword">value</span>.m_DontLocalizeParameters ? <span class="number">0</span> : <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> changed = <span class="keyword">new</span> EditorGUI.ChangeCheckScope())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> newMask = EditorGUILayout.MaskField(mask, <span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"Arabic Fix"</span>, <span class="string">"Ignore Numbers in RTL"</span>, <span class="string">"Localize Parameters"</span> &#125;, GUILayout.Width(<span class="number">30</span>));</span><br><span class="line">                    <span class="keyword">if</span> (newMask != mask)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">value</span>.mRTL_IgnoreArabicFix = (newMask &amp; <span class="number">1</span>) == <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">value</span>.mRTL_ConvertNumbers = (newMask &amp; <span class="number">2</span>) == <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">value</span>.m_DontLocalizeParameters = (newMask &amp; <span class="number">4</span>) == <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (GUILayout.Button(<span class="string">$"Clear"</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">/* this will also work</span></span><br><span class="line"><span class="comment">                    LocalizedString next = new LocalizedString("[NULL]");</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    s_wtfKey = <span class="string">"[NULL]"</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            LocalizedString next = s_hasChanged ? <span class="keyword">new</span> LocalizedString(s_wtfKey) : <span class="keyword">value</span>;</span><br><span class="line">            s_hasChanged = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            draw preview</span></span><br><span class="line"><span class="comment">            draw preview</span></span><br><span class="line"><span class="comment">            draw preview</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">string</span> <span class="title">GetParamValue</span>(<span class="params"><span class="keyword">string</span> key</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ParmsArray.Length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (ParmsArray[i].Name == key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">string</span>.IsNullOrEmpty(ParmsArray[i].Value) ? key : ParmsArray[i].Value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="又踩坑"><a href="#又踩坑" class="headerlink" title="又踩坑"></a>又踩坑</h1><p>因为这边使用了静态字段，所以如果需要同时绘制这个字段两次，那就会出问题。所以最后我还是换回OdinValueDrawer。<br>静态字段最好还是别在这种情况下使用吧。</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>UnityEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity UGUI Ez Anchor</title>
    <url>/2022/04/23/20220423-ez-anchor/</url>
    <content><![CDATA[<p>经过了一次用户测试之后，拿到的反馈说我们很多页面的UX设计都不行，只能各种重做，不论是我程序这边还是UXUI组那边，我们都需要重新拼好一些 prefab。</p>
<p>然后还有一些旧的 prefab 我们需要换皮改尺寸之类的，这次就来分享一个简单的小工具，用来做一些简单的尺寸适配。</p>
<img src="/2022/04/23/20220423-ez-anchor/20220423-pic001.gif" class="" title="split">
<p>RectTransform 上 anchor 的 Min, Max 都是已经做了归一化的值。依靠调整 anchor 的值就可以设置当前元素在父元素中的相对位置和面积占比。<br>具体参考下面这篇文章<br><a href="https://blog.csdn.net/ChinarCSDN/article/details/88983587" target="_blank" rel="noopener">https://blog.csdn.net/ChinarCSDN/article/details/88983587</a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[<span class="meta">InitializeOnLoad</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">RectTransformExtendedEditor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> EditContext</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> RectTransform Transform;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> EditContext m_context;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">bool</span> m_showTool;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">RectTransformExtendedEditor</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Selection.selectionChanged += OnSelectionChanged;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnSelectionChanged</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        SceneView.duringSceneGui -= OnSceneGUI;</span><br><span class="line">        <span class="keyword">if</span> (Selection.activeTransform <span class="keyword">is</span> RectTransform rectTransform)</span><br><span class="line">        &#123;</span><br><span class="line">            m_context = <span class="keyword">new</span> EditContext()</span><br><span class="line">            &#123;</span><br><span class="line">                Transform = rectTransform</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            SceneView.duringSceneGui += OnSceneGUI;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnSceneGUI</span>(<span class="params">SceneView sceneView</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Handles.BeginGUI();</span><br><span class="line">        <span class="keyword">if</span> (GUI.Button(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">20</span>), <span class="string">"T"</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            m_showTool = !m_showTool;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (m_showTool)</span><br><span class="line">        &#123;</span><br><span class="line">            GUILayout.BeginArea(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">20</span>, <span class="number">120</span>, <span class="number">320</span>));</span><br><span class="line">            <span class="keyword">if</span> (GUILayout.Button(<span class="string">"Set Anchors"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                RectTransform rectTransform = m_context.Transform;</span><br><span class="line">                RectTransform parent = rectTransform.parent <span class="keyword">as</span> RectTransform;</span><br><span class="line"></span><br><span class="line">                Undo.RecordObject(rectTransform, <span class="string">"Set Anchors"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Vector2 anchorMin = <span class="keyword">new</span> Vector2(</span><br><span class="line">                        rectTransform.anchorMin.x + rectTransform.offsetMin.x / parent.rect.width,</span><br><span class="line">                        rectTransform.anchorMin.y + rectTransform.offsetMin.y / parent.rect.height);</span><br><span class="line"></span><br><span class="line">                    Vector2 anchorMax = <span class="keyword">new</span> Vector2(</span><br><span class="line">                        rectTransform.anchorMax.x + rectTransform.offsetMax.x / parent.rect.width,</span><br><span class="line">                        rectTransform.anchorMax.y + rectTransform.offsetMax.y / parent.rect.height);</span><br><span class="line"></span><br><span class="line">                    rectTransform.anchorMin = anchorMin;</span><br><span class="line">                    rectTransform.anchorMax = anchorMax;</span><br><span class="line">                    rectTransform.offsetMin = rectTransform.offsetMax = Vector2.zero;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            GUILayout.EndArea();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Handles.EndGUI();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1><p>有了这个 acnhor 适配真的方便不少。有时候我们做好一个 list element，但在不同的地方用到的时候大小可能不一样。<br>用这个适配调整以后可以防止各种奇妙出格，而且就点两下按钮，对于 UXUI 团队来说也是非常容易上手的。</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UGUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Hyperv 虚拟机共享VPN给宿主机</title>
    <url>/2022/05/15/20220515-hyperv-vpn-inside/</url>
    <content><![CDATA[<p>被封在鼠窝里两个月了，一直都是在家用自己的老爷备用机做工作。但是老(项)爷(目)机的性(优)能(化)实在是太差了。<br>打开 Unity 需要5分钟，编译代码3分钟，点一下 play 又是2分钟。这段时间来回修各种BUG，切来切去浪费了很多时间。</p>
<p>决定还是用大奶机工作了，但又非常不愿意把公司的间谍全家桶装在电脑上，咋办呢？</p>
<p>上网查了一下，大家说可以把全家桶关在虚拟机里，然后再把网络分享给宿主机。</p>
<h2 id="Hyper-V"><a href="#Hyper-V" class="headerlink" title="Hyper-V"></a>Hyper-V</h2><p>最开始试用了 VirtualBox 无论是装32位还是64位的Win10或者 WinServer 都卡到飞起。即使把虚拟机的虚拟盘放在 SSD 上也还是卡。<br>了解到 Windows 有这个 Hyper-V 虚拟机就决定试用一下。</p>
<p>结果这个玩意儿性能超棒的哦！放在 SSD 上可以说是不怎么卡。而且也能直接读宿主机的硬盘或油盘，非常的方便，虽然读盘的时候硬盘使用率显示是拉满的。</p>
<p>我记得以前如果要要使用 VM 或者 VBox 的话需要关闭 Hyper-V 的功能，但是自从 Win10 20H2 还是某个版本之后就不需要这么做了。</p>
<h3 id="虚拟机启动小坑"><a href="#虚拟机启动小坑" class="headerlink" title="虚拟机启动小坑"></a>虚拟机启动小坑</h3><p>“Boot Issue: Start PXE over IPv4”</p>
<p>装好系统以后俺启动虚拟机就报这个错误。<br>把硬盘移动到第一位就好了。</p>
<img src="/2022/05/15/20220515-hyperv-vpn-inside/20220515-pic004.png" class="" title="split">
<h2 id="配置虚拟网卡"><a href="#配置虚拟网卡" class="headerlink" title="配置虚拟网卡"></a>配置虚拟网卡</h2><p>参考了网上的通用方案，需要两张虚拟网卡，一张桥接用来上网，另一个接收全家桶的分享。</p>
<p>桥接</p>
<p>我这边选用的是有线网的接口</p>
<img src="/2022/05/15/20220515-hyperv-vpn-inside/20220515-pic001.png" class="" title="split">
<p>内部网络</p>
<img src="/2022/05/15/20220515-hyperv-vpn-inside/20220515-pic002.png" class="" title="split">
<p>ipconfig 结果</p>
<img src="/2022/05/15/20220515-hyperv-vpn-inside/20220515-pic003.png" class="" title="split">
<h2 id="宿主机配置"><a href="#宿主机配置" class="headerlink" title="宿主机配置"></a>宿主机配置</h2><p>接下来就是配置宿主机，这又有一个不一样的情况出现了。</p>
<p>在 Hyper-V 那边添加了1个虚拟交换机以后, 宿主机这边会出现2个适配器。不知道是不是我这边特有的情况。<br>把内部网络适配器的IP地址设置到 192.168.137.0 网段，我这边修改的是这个名字相同的。</p>
<img src="/2022/05/15/20220515-hyperv-vpn-inside/20220515-pic005.png" class="" title="split">
<p>然后宿主机添加转发就可以了，不过速度不够快，全家桶直接装宿主机上还是比较快的，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">route add x.y.0.0 mask 255.255.0.0 192.168.137.1</span><br></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://yidianyidi.fun/VirtualBox/yidianyidi-1708121150.html" target="_blank" rel="noopener">https://yidianyidi.fun/VirtualBox/yidianyidi-1708121150.html</a></p>
<p><a href="https://www.youtube.com/watch?v=9Hc-5EOtaJs" target="_blank" rel="noopener">https://www.youtube.com/watch?v=9Hc-5EOtaJs</a></p>
]]></content>
      <categories>
        <category>VirtualMachine</category>
      </categories>
      <tags>
        <tag>Misc</tag>
        <tag>VirtualMachine</tag>
      </tags>
  </entry>
  <entry>
    <title>notes dat I took from the Divsion UI talk</title>
    <url>/2022/08/06/20220806-division-UI-talk-note/</url>
    <content><![CDATA[<p>Well just ignore dat weird tag. :D</p>
<p>Here is muy notes dat I learn from the Divsion UI talk.</p>
<p>The key is iteration, threading and data.</p>
<p>Iterate your stuff to make it better.</p>
<p>Threading and data driven make the work efficient.</p>
<p><a href="https://www.youtube.com/watch?v=H1MLtML0np0" target="_blank" rel="noopener">video</a>.</p>
<h1 id="Snow-drop-UI"><a href="#Snow-drop-UI" class="headerlink" title="Snow drop UI"></a>Snow drop UI</h1><ul>
<li>No canvas</li>
<li>Immediate Mode<ul>
<li>Constant cost (maybe it’s more statble?).</li>
</ul>
</li>
<li>Vector Graphics<ul>
<li>Shapes(scaling friendly, dun rely on resolution) over textures masks.</li>
<li>Save GPU load by only rendering the pixels gonna be used.</li>
<li>Artist can play with it.</li>
</ul>
</li>
</ul>
<h1 id="Game-Data-amp-Node-graph"><a href="#Game-Data-amp-Node-graph" class="headerlink" title="Game Data &amp; Node graph"></a>Game Data &amp; Node graph</h1><ul>
<li><p>Lots of data getter (get pure data?) (in graph node), used in UI and also game play.</p>
</li>
<li><p>Auto conversion to save some performance.</p>
</li>
<li><p>custom UI logic components.</p>
</li>
<li><p>custom reusable compounds.</p>
</li>
</ul>
<h1 id="Iteration"><a href="#Iteration" class="headerlink" title="Iteration"></a>Iteration</h1><h2 id="For-coder"><a href="#For-coder" class="headerlink" title="For coder"></a>For coder</h2><h3 id="Reduce-complie-time"><a href="#Reduce-complie-time" class="headerlink" title="Reduce complie time"></a>Reduce complie time</h3><ul>
<li>Blob builds(idk what is this).</li>
<li>Header file reduction.</li>
<li>Keep refactoring code to make it efficient.</li>
<li>Remove nolonger used code.</li>
</ul>
<h3 id="Reduce-startup-time-and-Load-time"><a href="#Reduce-startup-time-and-Load-time" class="headerlink" title="Reduce startup time and Load time"></a>Reduce startup time and Load time</h3><ul>
<li>Only load needed stuff.</li>
<li>UI preview with live data for easy iteration.</li>
<li>Well some debug UI will also help :).</li>
</ul>
<p>(for my unity project)</p>
<ul>
<li>Have a UI preview scene (UI only, we can preview states and transitions).</li>
<li>Have simple a gym dat provide gameplay with enough content.</li>
</ul>
<h3 id="Coder-to-Artist"><a href="#Coder-to-Artist" class="headerlink" title="Coder to Artist"></a>Coder to Artist</h3><ul>
<li><p>Coder work with artist (react fast to feedbacks).</p>
</li>
<li><p>Resable compounds, arist can directly use.</p>
</li>
</ul>
<h2 id="Drawback-of-iteration"><a href="#Drawback-of-iteration" class="headerlink" title="Drawback of iteration"></a>Drawback of iteration</h2><ul>
<li>Hard to stop.</li>
<li>Set clear goals and deadlines. (do not waste time)</li>
<li>Greate for prototyping, risk for delivering. (need a lead to shut down iteration, make the decision)</li>
</ul>
<h1 id="Building-blocks-of-UI"><a href="#Building-blocks-of-UI" class="headerlink" title="Building blocks of UI"></a>Building blocks of UI</h1><p>To let arist and designers to have full(or more) control?</p>
<h2 id="Widget-and-Graphics"><a href="#Widget-and-Graphics" class="headerlink" title="Widget and Graphics"></a>Widget and Graphics</h2><p>Widget define space, accept input. Graphic improve widget, relative size, also accept input?</p>
<h2 id="5-Basic-widgets-with-a-few-variations"><a href="#5-Basic-widgets-with-a-few-variations" class="headerlink" title="5 Basic widgets with a few variations."></a>5 Basic widgets with a few variations.</h2><p>Use basic widgets, and use them to build functionalities.</p>
<ul>
<li><p>Window</p>
<ul>
<li>2D and 3D (anchoring functionalities, pixels or percentage; prepare some options for different auto scaling and apply to different UI widgets/graphic and situations).</li>
<li>Vertical Stack (stack the (children)widgets)</li>
<li>Layering</li>
</ul>
</li>
<li><p>Text</p>
<ul>
<li>JIT font generaion (wtf, keep memory down)</li>
<li>Fich text formatting lib to build customize text(icon, color …).</li>
<li>Auto clip (no idea how to do it)</li>
</ul>
</li>
<li><p>Image</p>
<ul>
<li>Use color/gradient more. (looks good with vector graphic)</li>
<li>Texture and loose image(ikd this, no border image?) into sprite sheet.</li>
</ul>
</li>
<li><p>Stack container</p>
<ul>
<li>For sorting elements.</li>
<li>Spacing and padding (how to do it with stack)</li>
<li>Invert for quick right to left language fixes (wtf)</li>
</ul>
</li>
<li><p>Scroll Box</p>
<ul>
<li>Fixed size(viewport size) with a virtual inner space(content).</li>
</ul>
</li>
</ul>
<h2 id="7-Graphics-nodes"><a href="#7-Graphics-nodes" class="headerlink" title="7 Graphics (nodes)"></a>7 Graphics (nodes)</h2><ul>
<li>Text with effects.</li>
<li>Images(basic) with more shapes, flat or curved.</li>
<li>Lines(strait, curved list?, 3d)</li>
<li>Points, single point or large squares(for effects?)</li>
<li>Shapes </li>
<li>Sector (why? for their art style?)</li>
<li>Custom graphics</li>
</ul>
<h1 id="Simply-Ui-workflow"><a href="#Simply-Ui-workflow" class="headerlink" title="Simply Ui workflow"></a>Simply Ui workflow</h1><ul>
<li>Complex and powerful (lots of resuable compounds, and threading stuff)</li>
<li>Documentation and examples(I guess examples are better and save time)</li>
</ul>
<h2 id="For-coder-1"><a href="#For-coder-1" class="headerlink" title="For coder"></a>For coder</h2><ul>
<li>Simple code; Less code, less bugs </li>
<li>Simple Tools; Do not overthink. Simple base, complex behaviour.</li>
</ul>
<h2 id="For-UI-artist-designer"><a href="#For-UI-artist-designer" class="headerlink" title="For UI artist/designer"></a>For UI artist/designer</h2><ul>
<li>Communicate to avoid merge conflicts, get ahead of it (cuz yaml merge wont help u all the time).</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>查询MonoBehaviour在工程中的引用</title>
    <url>/2022/07/24/20220724-find-script-reference/</url>
    <content><![CDATA[<p>以前弄过一个在项目中查找Asset引用的。虽然很泛用，但跑起来非常的慢。<br>其实我们实际使用的时候，我们会经常做某一种搜索(比如查找脚本在预制体上的引用)。对于这种需要使用的特定条件的查找，单独做一个小工具可能效率会更高。</p>
<p>本来还在烦恼怎么做，导师很快就做好了，跑起来很快。他告诉我，秘诀是 GetComponent。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>代码不方便直接贴出来，但还是想分享(记录)一下几个关键的步骤和思路~</p>
<h3 id="选择脚本"><a href="#选择脚本" class="headerlink" title="选择脚本"></a>选择脚本</h3><p>我们需要在编辑器上用一个 field 去放我们想要搜寻的脚本。<br>但是没办法是用在泛型类上。需要指定实际的类型。</p>
<p>Interface也可以查，放心用！</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">targetScript = EditorGUILayout.ObjectField(m_targetScript, <span class="keyword">typeof</span>(MonoScript), <span class="literal">false</span>) <span class="keyword">as</span> MonoScript;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class SomeMono&lt;TData&gt; : MonoBehaviour</span></span><br><span class="line"><span class="comment">doesnt work on this case, the result will be null     </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Type targetType = m_targetScript.GetClass();</span><br></pre></td></tr></table></figure>
<h3 id="获取预制体"><a href="#获取预制体" class="headerlink" title="获取预制体"></a>获取预制体</h3><p>从我们选择的目录下获取所有的prefab，相信Unity，这一步不会很慢的。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// we can also set the folderPath to save our time :D </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> paths = AssetDatabase.FindAssets(<span class="string">$"t: prefab"</span>, <span class="keyword">new</span>[] &#123; folderPath &#125;);</span><br><span class="line">GameObject[] toCheck = <span class="keyword">new</span> GameObject[paths.Length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paths.Length; i++)</span><br><span class="line">    toCheck[i] = AssetDatabase.LoadAssetAtPath&lt;GameObject&gt;(AssetDatabase.GUIDToAssetPath(paths[i]));</span><br></pre></td></tr></table></figure>
<h3 id="查询引用"><a href="#查询引用" class="headerlink" title="查询引用"></a>查询引用</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Type targetType;</span><br><span class="line">GameObject prefab;</span><br><span class="line"><span class="keyword">var</span> components = prefab.GetComponents(targetType);</span><br><span class="line"><span class="comment">// if components is not empty, then you get your stuff :D</span></span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果要说学到了什么的话，大概是做工具前要搞明白它的使用情景，不能太脱节Tw.T</p>
]]></content>
      <categories>
        <category>UnityEditor</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UnityEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity Video Url source 赋值小坑</title>
    <url>/2022/08/10/20220810-unity-video-url-delay/</url>
    <content><![CDATA[<p>这周赶版本，接到了一个前同事留下来的bug。是说UI上的教程视频一直不播放。<br>我们的视频资源是在 StreamingAssets 下的，用path进行加载。<br>播放相关的代码如下。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_player.prepareCompleted += OnPrepareCompleted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnPrepareCompleted</span>(<span class="params">VideoPlayer source</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.Log(<span class="string">"OnPrepareCompleted"</span>);</span><br><span class="line">    m_player.Play();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetVideo</span>(<span class="params"><span class="keyword">string</span> path</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_player.source = VideoSource.Url;</span><br><span class="line">    <span class="comment">// I guess this process may not be finished now.</span></span><br><span class="line">    m_player.url = path;</span><br><span class="line">    m_player.Prepare();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查了一下，发现在调用了 SetVideo 之后，OnPrepareCompleted没有被调用，意思是 VideoPlayer的prepareCompleted事件没有触发。<br>我猜发生这个情况的原因是，当我们使用url来设置视频资源的那一帧，VideoPlayer还没能获取到视频资源的一些属性，或是上一个视频资源还在占用着当前的播放器，所以这个时候如果调用PrePare，其实是没有用的。</p>
<p>所以我使用的Hacky Fix是在设置完资源的URL之后，等一帧再调用Prepare，然后等待 prepareCompleted 事件。</p>
<p>顺便在网上查了一下，也有些人遇到类似的问题，说是赋值URL之后不知道视频资源什么时候才能正确播放。<br>论坛里有个人给出的解决方法是去检查 VideoPlayer.isPrepared 的这个属性。但赋值URL之后这个值并不会在某一时刻变成true。</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity RectTransform 小笔记</title>
    <url>/2022/08/14/20220814-unity-recttransform/</url>
    <content><![CDATA[<p>之前看了一些关于RectTransform的文章，但是最终记忆都不是很深刻。而且要用的时候重新找还挺麻烦的。<br>干脆把别人的笔记抄来一些好了，以后也方便就着自己的笔记和UXUI同学解释。</p>
<h1 id="Pivot"><a href="#Pivot" class="headerlink" title="Pivot"></a>Pivot</h1><p>中心点，是UI元素旋转/缩放的中心点。使用归一化Vector2表示。</p>
<h1 id="Anchor"><a href="#Anchor" class="headerlink" title="Anchor"></a>Anchor</h1><p>其实是由两个点组成的(AnchorMin, AnchorMax)。并使用归一化Vector2来表示。<br>数值代表了在父类X轴和Y轴方向的百分比。</p>
<h2 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a>绝对布局</h2><blockquote>
<p>当anchorMax与anchorMin相等时，Anchor呈现为一个点，称之为锚点<br>在使用锚点的情况下，anchoredPosition是元素Pivot到Anchor的距离</p>
</blockquote>
<p>此时会有4个重要的属性。</p>
<ul>
<li>PosX, posY : 中心点到锚点的参数，实际像素值</li>
<li>Width, Height : UI 元素的尺寸</li>
</ul>
<p>绝对布局的情况下无论分辨率是多少，父物体多大，该UI元素的大小是恒定的。</p>
<h2 id="相对布局"><a href="#相对布局" class="headerlink" title="相对布局"></a>相对布局</h2><blockquote>
<p>当anchorMax与anchorMin不相等时，Anchor呈现为一个框，称之为锚框<br>在使用锚框的情况下，anchoredPosition是元素Pivot到锚框中心点的距离</p>
</blockquote>
<p>这种情况下UI元素的四个角，距离四个对应的锚点的距离是不变的，在这种情况下RectTransform的属性又变为了Left,Top,Right,Bottom。</p>
<ul>
<li>Left,Top,Right,Bottom : 四个点的数值分别是(Left,Top,Right,Bottom)锚点到实际的rect的这4个位置的点的距离。</li>
</ul>
<h1 id="SizeDelta"><a href="#SizeDelta" class="headerlink" title="SizeDelta"></a>SizeDelta</h1><h2 id="OffsetMin-OffsetMax"><a href="#OffsetMin-OffsetMax" class="headerlink" title="OffsetMin/OffsetMax"></a>OffsetMin/OffsetMax</h2><p>min是实际UI原素相对于AnchorMin的偏移，另外一个不言而喻.</p>
<p>sizeDelta就是offsetMax - offsetMin的值。</p>
<blockquote>
<p>所以这个属性之所以叫做sizeDelta，是因为在锚点情况下其表征的是size（大小），在锚框的情况下其表征的是Delta（UI元素实际的属性值与锚框的差值）</p>
</blockquote>
<h1 id="Rect"><a href="#Rect" class="headerlink" title="Rect"></a>Rect</h1><p>rect中的属性，不与UI元素所在的位置有关，只和其自身属性相关。根据rect中提供的width和height可以得到UI元素实际的尺寸大小。</p>
<p>rect.position指的是以Pivot为原点，UI元素左下角的坐标。(right,up 为正方向)</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/194317677" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/194317677</a><br><a href="https://blog.csdn.net/jmu201521121014/article/details/105725175" target="_blank" rel="noopener">https://blog.csdn.net/jmu201521121014/article/details/105725175</a></p>
<p>顺便推荐一下在线画图小工具，不方便贴图的时候用这个还挺不错的。<br><a href="https://asciiflow.com/#/" target="_blank" rel="noopener">https://asciiflow.com/#/</a><br><a href="https://textik.com/" target="_blank" rel="noopener">https://textik.com/</a></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UGUI</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 State Object 暂存 property drawer 的状态。</title>
    <url>/2022/07/30/20220730-unity-editor-stateobj/</url>
    <content><![CDATA[<p>最近在做红点功能，path是用string挂在UI物体上的。UI同学那边想要一个按钮可以切换path在inspector是可编辑或不可编辑的状态。<br>最开始毫无思路，因为本身path是一个string，我自然不可以它身上记录这个编辑与否的状态。后来想着能不能把这个状态存在path的protperty drawer上。问了下导师，可行，但是没法直接存。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>创建一个object存储这个状态，这个object存入editor的state object里。<br>在Property drawer进行绘制的时候获取/更新这个object。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码很简单</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UITagDrawer</span> : <span class="title">PropertyDrawer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// the object for string state</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">EditingState</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">bool</span> IsEditing = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnGUI</span>(<span class="params">Rect position, SerializedProperty property, GUIContent label</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">/***/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// get state object</span></span><br><span class="line">        EditingState state = GUIUtility.GetStateObject(<span class="keyword">typeof</span>(EditingState), GUIUtility.GetControlID(FocusType.Passive)) <span class="keyword">as</span> EditingState;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">new</span> EditorGUILayout.HorizontalScope(style))</span><br><span class="line">        &#123;</span><br><span class="line">            Rect editButtonRect = <span class="keyword">new</span> Rect(position.x, position.y, <span class="number">16f</span>, <span class="number">16f</span>);</span><br><span class="line">            <span class="keyword">if</span> (GUI.Button(editButtonRect, <span class="string">"E"</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// well since it's a class we dun need to set it back :&gt;</span></span><br><span class="line">                state.IsEditing = !state.IsEditing;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (GUILayout.Button(<span class="string">"X"</span>, GUILayout.Width(<span class="number">18</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                state.IsEditing = !state.IsEditing;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (state.IsEditing)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// show text field</span></span><br><span class="line">                tagStr = EditorGUILayout.TextField(tagStr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// show lable</span></span><br><span class="line">                EditorGUILayout.LabelField(tagStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>UnityEditor</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UnityEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>查询Asset在工程中的引用(GUID)</title>
    <url>/2022/09/12/20220912-unity-findref-guid/</url>
    <content><![CDATA[<p>之前我用Unity自带的API去查询一些物体的引用，结果当然是超超超超超级慢，对于那些把项目工程放在辣鸡机械盘上的同事，这个工具根本是没法好好用的。而且因为要用Unity的APi，自然是没办法使用async的。</p>
<p>最近导师拿到QA那边提供的一个类似的工具，改了一下，做了一个超级快的版本。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>思路其实是非常简单的。我们知道Unity Asset会有一个唯一的GUID，那我们就可以用这个GUID去查询其引用。<br>查询的时候我们也不需要使用Unity API去检查引用，而是把我们的各种Asset都当成文本文件直接读取，然后直接在这些文本里去匹配我们需要查询的GUID。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// guidRegex just contains the asset guid</span></span><br><span class="line"><span class="function">List&lt;<span class="keyword">string</span>&gt; <span class="title">GetResult</span>(<span class="params"><span class="keyword">string</span>[] folders, Regex guidRegex</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span>[] files = folders.SelectMany(folder =&gt; Directory.GetFiles(folder, <span class="string">"*"</span>SearchOption.AllDirectories)).ToArray();</span><br><span class="line">    List&lt;<span class="keyword">string</span>&gt; result = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">int</span> count = files.Length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> filePath = files[i];</span><br><span class="line">        <span class="keyword">if</span> (ChecKFile(filePath, guidRegex))</span><br><span class="line">        &#123;</span><br><span class="line">            result.Add(filePath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ChecKFile</span>(<span class="params"><span class="keyword">string</span> filepath, Regex fileContent</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> assetText = File.ReadAllText(filepath);</span><br><span class="line">    MatchCollection matches = fileContent.Matches(assetText);</span><br><span class="line">    <span class="keyword">return</span> matches.Count &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键代码和Unity API毫无关系，可以避免长时间的卡死，而且我们也能加入取消搜索的功能之类的。如果在乎性能的话可以还可以在读文件检查这边做优化。不过感觉这样已经比之前快了许多了。</p>
]]></content>
      <categories>
        <category>UnityEditor</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UnityEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>Rapid UI Creation Note</title>
    <url>/2022/10/05/20221005-rapid-UGUI-creation-note/</url>
    <content><![CDATA[<p>When I searching some articles about MVC and MVVM, I see this talk.<br>Basiclly they does same stuff as my current project, but we still have some differences on our implementation.<br>I’d like to share it and take some notes :D</p>
<p>Here is the talk abour UGUI implementation.<br><a href="https://www.youtube.com/watch?v=uDQU_dlO-ZM" target="_blank" rel="noopener">video</a>.<br><a href="https://www.gdcvault.com/play/1024453/Data-Binding-Architectures-for-Rapid" target="_blank" rel="noopener">ppt</a>.<br><a href="https://stackoverflow.com/questions/667781/what-is-the-difference-between-mvc-and-mvvm" target="_blank" rel="noopener">temp</a>.</p>
<h1 id="Main-note"><a href="#Main-note" class="headerlink" title="Main note"></a>Main note</h1><h2 id="Architecture-in-lt-Lost-Survivor-gt"><a href="#Architecture-in-lt-Lost-Survivor-gt" class="headerlink" title="Architecture in &lt; Lost Survivor &gt;"></a>Architecture in &lt; Lost Survivor &gt;</h2><ul>
<li>Artist works directly in Unity (Creating prefabs, setup aniamtions; well that’s what I my current project does, so I guess they did the same)</li>
<li>Dev works on GameLogic and UILogic</li>
<li>Dev/Art work decoupled</li>
<li>Dev/Art work parallel (This happens a lot in iteration)</li>
</ul>
<h2 id="The-Pattern-used-in-lt-Lost-Survivor-gt"><a href="#The-Pattern-used-in-lt-Lost-Survivor-gt" class="headerlink" title="The Pattern used in &lt; Lost Survivor &gt;"></a>The Pattern used in &lt; Lost Survivor &gt;</h2><h3 id="MVCVM-they-choose-this"><a href="#MVCVM-they-choose-this" class="headerlink" title="MVCVM (they choose this)"></a>MVCVM (they choose this)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                                                                                                                               </span><br><span class="line">                                                        +---------------------------------------+                              </span><br><span class="line">                                                        |                data binding           |                              </span><br><span class="line">                                                        |                    &lt;-&gt;                |                              </span><br><span class="line">                                                        |                                       |                              </span><br><span class="line">                                                        |                                       |                              </span><br><span class="line">+------------------------------+                        |                                       |                              </span><br><span class="line">|                              | +----------------------|-------+    +------------------------------+ +-----------------------+</span><br><span class="line">----------Controller------------ |         Model                |    |        View Model            | |    View (UGUI View)   |</span><br><span class="line">|                              | --------------------------------    -------------------------------- -------------------------</span><br><span class="line">| void GainXP();               | |      int XP;                 |    |                              | | Text XP;              |</span><br><span class="line">| void LevelUp();              | |      int Level;              |    |                              | | Text Attribute;       |</span><br><span class="line">|                              | |                              |    |                              | | Button ReAllocate;    |</span><br><span class="line">|                              | +--------------&#x2F;---------------+    +---------------\--------------+ | int WeaponATK;        |</span><br><span class="line">+---------------\--------------+              &#x2F;-                                      -\              |                       |</span><br><span class="line">                 \                          &#x2F;-                                          -\            +-----------&#x2F;-----------+</span><br><span class="line">                  -\                      &#x2F;-                                              \                      |             </span><br><span class="line">                    \                   &#x2F;-                                                 -\                    &#x2F;             </span><br><span class="line">            +---------------------------------------------------------------------------------------------------|-------+      </span><br><span class="line">            |                                                                                                           |      </span><br><span class="line">            |                                               Message Bus                                                 |      </span><br><span class="line">            +-----------------------------------------------------|-----------------------------------------------------+      </span><br><span class="line">                                                                  |                                                            </span><br><span class="line">                                                                  |                                                            </span><br><span class="line">                                                                  |                                                            </span><br><span class="line">                                                    +-------------|------------+                                               </span><br><span class="line">                                                    |                          |                                               </span><br><span class="line">                                                    |      server backend      |                                               </span><br><span class="line">                                                    |                          |                                               </span><br><span class="line">                                                    +--------------------------+</span><br></pre></td></tr></table></figure>
<p>This is the pattern they use for their project.<br>The one thing that I cant understand is that the View will receive events from MessageBus. IDK why they did like this. For me, I prefer to let view only receive direct events from VM, bind to many stuff to MessageBus will make it slow.</p>
<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                                                                                                                                                                                                   </span><br><span class="line">                                   +------------------------------+                                    </span><br><span class="line">                                   |          Controller          |                                    </span><br><span class="line">+---------------------------------------------------------------------------------------------+        </span><br><span class="line">|         user action -&gt;           |  void GainXp();              |       update -&gt;           |        </span><br><span class="line">|                                  |  Void LevelUp();             |                           |        </span><br><span class="line">|                                  |  int GetAttribute(type);     |                           |        </span><br><span class="line">|                                  |                              |                           |        </span><br><span class="line">|                                  |                              |                           |        </span><br><span class="line">|                                  +-------|--------------|-------+                           |        </span><br><span class="line">|                                          |              |                                   |        </span><br><span class="line">|------------------------------+           |              |            +----------------------|-------+</span><br><span class="line">|    Character View            |           |              |            |         Model                |</span><br><span class="line">--------------------------------           |              |            --------------------------------</span><br><span class="line">| Text XP;                     |           |              |            | int AmountXp;                |</span><br><span class="line">| Text Attribute;              ------------+              |            | int AttributeTypeA;          |</span><br><span class="line">| Button ReAllocate;           | &lt;- update                |            | int AttributeTypeB;          |</span><br><span class="line">|                              |                          +-------------                              |</span><br><span class="line">|                              |                     &lt;- notify change? |                              |</span><br><span class="line">+------------------------------+                                       +------------------------------+</span><br></pre></td></tr></table></figure>
<p>I’m sure this pattern is kind of useful. I use this a lot when I did the first version of some UI pages. But later the Controller become a giant class.<br>And also I think the View and Controller in this pattern is not very reusable.</p>
<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                                                                                                                            </span><br><span class="line">                                                                                            +------------------------------+</span><br><span class="line">                                                                                            |         Model Character      |</span><br><span class="line">                                                                            +-----------------------------------------------</span><br><span class="line">                                                                            |               | int AmountXp;                |</span><br><span class="line">                                                                            |               | int AttributeTypeA;          |</span><br><span class="line">                                                                            |               | int AttributeTypeB;          |</span><br><span class="line">                                                                            |               |                              |</span><br><span class="line">                                                                            |               |                              |</span><br><span class="line">                                                                            |               +------------------------------+</span><br><span class="line">+------------------------------+                     +----------------------|-------+                                       </span><br><span class="line">|      Character View          |   data binding &lt;-&gt;  |        View Model            |                                       </span><br><span class="line">--------------------------------   notifications &lt;-  --------------------------------                                       </span><br><span class="line">| Text XP;                     |   command -&gt;        |int AmountXP;                 |                                       </span><br><span class="line">| Text Attribute;              ----------------------+int WeaponATK;                |                                       </span><br><span class="line">| Button ReAllocate;           |                     |int WeaponLevel;              |       +------------------------------+</span><br><span class="line">| int WeaponATK;               |                     |                              |       |         Model Weapon         |</span><br><span class="line">|                              |                     |                              |       --------------------------------</span><br><span class="line">+------------------------------+                     +----------------------|-------+       | int ATK;                     |</span><br><span class="line">                                                                            |               | int Level;                   |</span><br><span class="line">                                                                            +----------------                              |</span><br><span class="line">                                                                                            +------------------------------+</span><br></pre></td></tr></table></figure>
<ul>
<li>ViewModel serves the View</li>
<li>One ViewModel per View</li>
<li>Based on Data Binding</li>
</ul>
<p>After a few iterations, I find this pattern is also a good solutions. And I feel that we can even use CompositePattern in ViewModel to create big ViewModel for some big views(resuable).</p>
<p>In my current project, for the UI-View, we create some basic view that can receive similar types of data. And the good thing from this pattern is that the VM can send notificaiton to View to update, then I dun need to have lots of update method from Controller to update different data (cuz some data update need aniamtion, I cant just update all).</p>
<h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><p>Previously it says that separating UIPrefabs creation and UILogic code may solve “Not my problem attitude”. But actually not.<br>In production state, everyone is busy, and we are iterating View-Scripts and VM-Scripts together. Sometimes it is diffcult to tell that is code issues or setup issues. Unless we have solid View-Scripts.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>This talk has lots of similiar content as the DivisionUI talk. And I also realise that the game development has lots of unknow shit. It’s very difficult to have some resuable components that always works. Even the thougts are similar, the implementation can be different. A solution can be that having some solid, simple, basic and resuable compoents.</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UGUI</tag>
      </tags>
  </entry>
  <entry>
    <title>根据一个UI物体的位置摆放另一个UI物体</title>
    <url>/2023/03/26/20230326-ui-element-positioning/</url>
    <content><![CDATA[<p>最近在遇到了一个需求，要点击某个道具UI之后，显示一个小的关于该道具的信息框。<br>大概是入下图这个样子的。</p>
<img src="/2023/03/26/20230326-ui-element-positioning/20230326-pic001.png" class="" title="split">
<p>还好之前做过，于是乎直接修修补补腾过去。至于为什么要修补，是因为在之前的项目里虽然写了一些和RectTransform相关的一些utils，但都因为懒和菜，没有去维护。有重复的方法还有错误的方法，麻了。<br>这次说是修补，也稍微重写了一些和RectTransform相关的一些utils,也准备带进项目里看看有没有地方可以用的。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Temp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> RectPositionType</span><br><span class="line">    &#123;</span><br><span class="line">        Center = <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        Top = <span class="number">1</span>,</span><br><span class="line">        Bottom = <span class="number">2</span>,</span><br><span class="line">        Left = <span class="number">3</span>,</span><br><span class="line">        Right = <span class="number">4</span>,</span><br><span class="line"></span><br><span class="line">        TopLeft = <span class="number">5</span>,</span><br><span class="line">        TopRight = <span class="number">6</span>,</span><br><span class="line"></span><br><span class="line">        BottomLeft = <span class="number">7</span>,</span><br><span class="line">        BottomRight = <span class="number">8</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UIElementPositionSetter</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">Header(<span class="meta-string">"target ui position"</span>)</span>]</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="keyword">private</span> RectPositionType _targetRectPosition = RectPositionType.Center;</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="keyword">private</span> Vector2 _targetPivot = Vector2.zero;</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="keyword">private</span> Vector2 _extraOffset = Vector2.zero;</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="keyword">private</span> RectOffset _adaptionOffset;</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">bool</span> _doScreenAdaption;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Header(<span class="meta-string">"other setting"</span>)</span>]</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="keyword">private</span> RectTransform _defaultBoundsCanvasTransform;</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">bool</span> _adjustHorizontal = <span class="literal">true</span>;</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">bool</span> _adjustVertical = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">region</span> position util</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="title">GetLocalRectPosition</span>(<span class="params">RectTransform target, RectPositionType offsetType</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetLocalRectPosition(target, offsetType, Vector2.zero);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="title">GetLocalRectPosition</span>(<span class="params">RectTransform target, RectPositionType offsetType, Vector2 offset</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> GetLocalRectPosition(target.rect.size, target.pivot, offsetType, offset);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector2 <span class="title">GetLocalRectPosition</span>(<span class="params">Vector2 targetSize, Vector2 targetPivot, RectPositionType offsetType, Vector2 offset</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Vector2 bottomLeft = Vector2.zero;</span><br><span class="line">            bottomLeft.x -= targetPivot.x * targetSize.x;</span><br><span class="line">            bottomLeft.y -= targetPivot.y * targetSize.y;</span><br><span class="line">            Vector2 result = bottomLeft;</span><br><span class="line">            <span class="keyword">switch</span> (offsetType)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> RectPositionType.Top:</span><br><span class="line">                    result += Vector2.right * <span class="number">0.5f</span> * targetSize.x + Vector2.up * targetSize.y;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> RectPositionType.Bottom:</span><br><span class="line">                    result += Vector2.right * <span class="number">0.5f</span> * targetSize.x;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> RectPositionType.Left:</span><br><span class="line">                    result += Vector2.up * <span class="number">0.5f</span> * targetSize.y;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> RectPositionType.Right:</span><br><span class="line">                    result += Vector2.right * targetSize.x + Vector2.up * <span class="number">0.5f</span> * targetSize.y;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> RectPositionType.TopLeft:</span><br><span class="line">                    result += Vector2.up * targetSize.y;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> RectPositionType.TopRight:</span><br><span class="line">                    result += Vector2.right * targetSize.x + Vector2.up * targetSize.y;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> RectPositionType.BottomRight:</span><br><span class="line">                    result += Vector2.right * targetSize.x;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> RectPositionType.BottomLeft:</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result + offset;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector3 <span class="title">RectPositionToWorld</span>(<span class="params">RectTransform rect, RectPositionType offsetType</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> RectPositionToWorld(rect, offsetType, Vector2.zero);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector3 <span class="title">RectPositionToWorld</span>(<span class="params">RectTransform rect, RectPositionType offsetType, Vector2 offset</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> localPosition = GetLocalRectPosition(rect, offsetType, offset);</span><br><span class="line">            <span class="keyword">return</span> rect.TransformPoint(localPosition);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Vector2 <span class="title">GetTargetRectPositionInLocalReference</span>(<span class="params">RectPositionType offsetType</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            RectTransform self = transform <span class="keyword">as</span> RectTransform;</span><br><span class="line">            Vector2 targetPivotPos = GetLocalRectPosition(self, _targetRectPosition, _extraOffset);</span><br><span class="line">            Vector2 virtualCenterPos = targetPivotPos;</span><br><span class="line">            virtualCenterPos += GetLocalRectPosition(_targetSize, _targetPivot, offsetType, Vector2.zero);</span><br><span class="line">            <span class="keyword">return</span> virtualCenterPos;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endregion</span></span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetPosition</span>(<span class="params">RectTransform target</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            RectTransform self = transform <span class="keyword">as</span> RectTransform;</span><br><span class="line">            Vector2 spawnPos = GetLocalRectPosition(self, _targetRectPosition, _extraOffset);</span><br><span class="line">            target.pivot = _targetPivot;</span><br><span class="line">            target.position = self.TransformPoint(spawnPos);</span><br><span class="line">            <span class="keyword">if</span> (_doScreenAdaption)</span><br><span class="line">            &#123;</span><br><span class="line">                Vector3 resultPosition = GetAdjustedTargetWorldPosition(self, _defaultBoundsCanvasTransform, _adaptionOffset, target.rect.size, _targetPivot, _extraOffset);</span><br><span class="line">                target.position = resultPosition;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="spawnReference"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="boundTransform"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="targetSize"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="targetPivot"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>target pivot world position<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Vector3 <span class="title">GetAdjustedTargetWorldPosition</span>(<span class="params">RectTransform spawnReference, RectTransform boundTransform, RectOffset boundOffset, Vector2 targetSize, Vector2 targetPivot, Vector2 extraOffset</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Vector2 pivotPos = GetAdjustedTargetLocalPositionFromSpawnReference(spawnReference, boundTransform, boundOffset, targetSize, targetPivot, extraOffset);</span><br><span class="line">            Vector3 result = spawnReference.TransformPoint(pivotPos);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="spawnReference"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="boundTransform"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="targetSize"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="targetPivot"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>target pivot position in spawnRefernce local space<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> Vector2 <span class="title">GetAdjustedTargetLocalPositionFromSpawnReference</span>(<span class="params">RectTransform spawnReference, RectTransform boundTransform, RectOffset boundOffset, Vector2 targetSize, Vector2 targetPivot, Vector2 extraOffset</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Vector2 targetPivotInSpawner = GetLocalRectPosition(spawnReference, _targetRectPosition);</span><br><span class="line">            targetPivotInSpawner += extraOffset;</span><br><span class="line"></span><br><span class="line">            Vector2 targetLeftInSpawner = targetPivotInSpawner;</span><br><span class="line">            targetLeftInSpawner.x -= targetPivot.x * targetSize.x;</span><br><span class="line">            targetLeftInSpawner.y -= (targetPivot.y - <span class="number">0.5f</span>) * targetSize.y;</span><br><span class="line"></span><br><span class="line">            Vector2 targetRightInSpawner = targetLeftInSpawner;</span><br><span class="line">            targetRightInSpawner.x += targetSize.x;</span><br><span class="line"></span><br><span class="line">            Vector2 targetTopInSpawner = targetLeftInSpawner;</span><br><span class="line">            targetTopInSpawner.x += targetSize.x * <span class="number">0.5f</span>;</span><br><span class="line">            targetTopInSpawner.y += targetSize.y * <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">            Vector2 targetBottomInSpawner = targetTopInSpawner;</span><br><span class="line">            targetBottomInSpawner.y -= targetSize.y;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_doScreenAdaption)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// do adaption</span></span><br><span class="line">                <span class="keyword">if</span> (boundTransform != <span class="literal">null</span>) <span class="comment">// then we consider the bound size as screen size</span></span><br><span class="line">                &#123;</span><br><span class="line">                    RectTransform outterBoundRectTransform = boundTransform;</span><br><span class="line">                    Matrix4x4 worldToBoundLocal = outterBoundRectTransform.worldToLocalMatrix;</span><br><span class="line">                    Vector2 boundLocalLeftPoint = GetLocalRectPosition(outterBoundRectTransform, RectPositionType.Left);</span><br><span class="line">                    boundLocalLeftPoint.x += _adaptionOffset.left;</span><br><span class="line">                    Vector2 boundLocalRightPoint = GetLocalRectPosition(outterBoundRectTransform, RectPositionType.Right);</span><br><span class="line">                    boundLocalRightPoint.x -= _adaptionOffset.right;</span><br><span class="line">                    Vector2 boundLocalTopPoint = GetLocalRectPosition(outterBoundRectTransform, RectPositionType.Top);</span><br><span class="line">                    boundLocalTopPoint.y -= _adaptionOffset.top;</span><br><span class="line">                    Vector2 boundLocalBottomPoint = GetLocalRectPosition(outterBoundRectTransform, RectPositionType.Bottom);</span><br><span class="line">                    boundLocalBottomPoint.y += _adaptionOffset.bottom;</span><br><span class="line"></span><br><span class="line">                    Vector2 targetLeftInBound = worldToBoundLocal.MultiplyPoint(spawnReference.TransformPoint(targetLeftInSpawner));</span><br><span class="line">                    <span class="keyword">bool</span> leftOut = targetLeftInBound.x &lt; boundLocalLeftPoint.x;</span><br><span class="line">                    Vector2 targetRightInbound = worldToBoundLocal.MultiplyPoint(spawnReference.TransformPoint(targetRightInSpawner));</span><br><span class="line">                    <span class="keyword">bool</span> rightOut = targetRightInbound.x &gt; boundLocalRightPoint.x;</span><br><span class="line">                    Vector2 targetTopInBound = worldToBoundLocal.MultiplyPoint(spawnReference.TransformPoint(targetTopInSpawner));</span><br><span class="line">                    <span class="keyword">bool</span> topOut = targetTopInBound.y &gt; boundLocalTopPoint.y;</span><br><span class="line">                    Vector2 targetBottomInBound = worldToBoundLocal.MultiplyPoint(spawnReference.TransformPoint(targetBottomInSpawner));</span><br><span class="line">                    <span class="keyword">bool</span> bottomOut = targetBottomInBound.y &lt; boundLocalBottomPoint.y;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//string localBoundPosStr = $"check bound local bound pos left_&#123;boundLocalLeftPoint&#125; right_&#123;boundLocalRightPoint&#125; top_&#123;boundLocalTopPoint&#125; bottom_&#123;boundLocalBottomPoint&#125;";</span></span><br><span class="line">                    <span class="comment">//string targetLocalPosStr = $"check target in bound pos left_&#123;targetLeftInBound&#125; right_&#123;targetRightInbound&#125; top_&#123;targetTopInBound&#125; bottom_&#123;targetBottomInBound&#125;";</span></span><br><span class="line">                    <span class="comment">//string checkResult = $"check result leftOut_&#123;leftOut&#125; rightOut_&#123;rightOut&#125; topOut_&#123;topOut&#125; bottomOut_&#123;bottomOut&#125;";</span></span><br><span class="line">                    <span class="comment">//Debug.Log($"&#123;localBoundPosStr&#125;\n&#123;targetLocalPosStr&#125;\n&#123;checkResult&#125;");</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (_adjustHorizontal)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (leftOut &amp;&amp; rightOut)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// bound too small</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">float</span> xDelta = <span class="number">0f</span>;</span><br><span class="line">                            <span class="keyword">if</span> (leftOut)</span><br><span class="line">                            &#123;</span><br><span class="line">                                xDelta = targetLeftInBound.x - boundLocalLeftPoint.x;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (rightOut)</span><br><span class="line">                            &#123;</span><br><span class="line">                                xDelta = targetRightInbound.x - boundLocalRightPoint.x;</span><br><span class="line">                            &#125;</span><br><span class="line">                            targetPivotInSpawner -= Vector2.right * xDelta;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (_adjustVertical)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (topOut &amp;&amp; bottomOut)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">// bound too small</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">float</span> yDelta = <span class="number">0f</span>;</span><br><span class="line">                            <span class="keyword">if</span> (topOut)</span><br><span class="line">                            &#123;</span><br><span class="line">                                yDelta = targetTopInBound.y - boundLocalTopPoint.y;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (bottomOut)</span><br><span class="line">                            &#123;</span><br><span class="line">                                yDelta = targetBottomInBound.y - boundLocalBottomPoint.y;</span><br><span class="line">                            &#125;</span><br><span class="line">                            targetPivotInSpawner -= Vector2.up * yDelta;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> targetPivotInSpawner;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"></span><br><span class="line">        [<span class="meta">Header(<span class="meta-string">"target preview"</span>)</span>]</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="keyword">private</span> Vector2 _targetSize = Vector2.one * <span class="number">128f</span>;</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="keyword">private</span> Color _previewBoundColor = Color.yellow;</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="keyword">private</span> Color _previewTargetColor = Color.white;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDrawGizmosSelected</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// draw A box to show the position of target</span></span><br><span class="line">            RectTransform spawnReference = transform <span class="keyword">as</span> RectTransform;</span><br><span class="line">            Vector2 topLeftPos = GetLocalRectPosition(spawnReference, _targetRectPosition);</span><br><span class="line">            topLeftPos += _extraOffset;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_doScreenAdaption)</span><br><span class="line">            &#123;</span><br><span class="line">                Vector2 pivotPosition = GetAdjustedTargetLocalPositionFromSpawnReference(spawnReference, _defaultBoundsCanvasTransform, _adaptionOffset, _targetSize, _targetPivot, _extraOffset);</span><br><span class="line">                pivotPosition.x -= _targetPivot.x * _targetSize.x;</span><br><span class="line">                pivotPosition.y += (<span class="number">1f</span> - _targetPivot.y) * _targetSize.y;</span><br><span class="line">                topLeftPos = pivotPosition;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// draw preview target</span></span><br><span class="line">            DrawBox(spawnReference, topLeftPos, _targetSize, _previewTargetColor);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// draw preview bound</span></span><br><span class="line">            <span class="keyword">if</span> (_defaultBoundsCanvasTransform != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Vector2 boundSize = _defaultBoundsCanvasTransform.rect.size;</span><br><span class="line">                boundSize.x -= _adaptionOffset.left + _adaptionOffset.right;</span><br><span class="line">                boundSize.y -= _adaptionOffset.top + _adaptionOffset.bottom;</span><br><span class="line">                DrawBox(_defaultBoundsCanvasTransform, GetLocalRectPosition(_defaultBoundsCanvasTransform, RectPositionType.TopLeft, <span class="keyword">new</span> Vector2(_adaptionOffset.left, -_adaptionOffset.top)), boundSize, _previewBoundColor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawBox</span>(<span class="params">RectTransform reference, Vector2 topLeftLocalPos, Vector2 size, Color color</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Color cachedColor = Gizmos.color;</span><br><span class="line">            Gizmos.color = color;</span><br><span class="line">            Gizmos.DrawLine(reference.TransformPoint(topLeftLocalPos), reference.TransformPoint(topLeftLocalPos + Vector2.right * size.x));</span><br><span class="line">            Gizmos.DrawLine(reference.TransformPoint(topLeftLocalPos), reference.TransformPoint(topLeftLocalPos + Vector2.down * size.y));</span><br><span class="line">            Gizmos.DrawLine(reference.TransformPoint(topLeftLocalPos + Vector2.right * size.x), reference.TransformPoint(topLeftLocalPos + Vector2.right * size.x + Vector2.down * size.y));</span><br><span class="line">            Gizmos.DrawLine(reference.TransformPoint(topLeftLocalPos + Vector2.down * size.y), reference.TransformPoint(topLeftLocalPos + Vector2.right * size.x + Vector2.down * size.y));</span><br><span class="line">            Gizmos.color = cachedColor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2023/03/26/20230326-ui-element-positioning/20230326-pic002.gif" class="" title="split">
<p>还是像以前一样，先在debug draw里把功能完成再给移到实际的物体上。<br>但这次还是很可惜没有把功能很好抽出成比较单独的数学运算，而且感觉要用到的参数好多也没法拆分，最后留了一个多参的入口。</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>UGUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>传入Predicate的小事</title>
    <url>/2023/05/01/20230501-list-pass-predicate/</url>
    <content><![CDATA[<p>现在依旧是在项目里负责一些UI业务的编写。前段时间需要需要给游戏中的 popup提示 做一些简单的重构，正好发现了我一直以来都误解的一个小点，决定记下来。</p>
<p>业务的要求就是做那种会弹出来一会儿再消失的提示，比如道具获取之类的UI。</p>
<p>我的做法就是用一个list去存着当前的提示，并 tick 检查它们是否结束，然后移除已经结束的相关数据。<br>大概的用法如下。</p>
<img src="/2023/05/01/20230501-list-pass-predicate/20230501-pic001.png" class="" title="split">
<p>但其实啊，这个做法在 tick 是非常不好的。同事很快地通过 JetBrainsRider 查看 IL Code ，并告诉我，直接这样传入会每次都 new obj 。有比较大的消耗。<br>所以在这种需要<strong>经常</strong> tick 并且条件<strong>比较固定</strong>的情况下。我们可以创建好 predicate 然后直接重复使用(可以存在成员变量里，这里演示就直接存在本地变量里了)。</p>
<img src="/2023/05/01/20230501-list-pass-predicate/20230501-pic002.png" class="" title="split">
<p>最后附上测试代码和结果 测试 count 为 100000</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PredicateTempTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">struct</span> TempPack</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> tempValue;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Random s_random = <span class="keyword">new</span> Random(DateTime.Now.Millisecond);</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TempPack <span class="title">CreateTempPack</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            TempPack pack = <span class="keyword">default</span>;</span><br><span class="line">            <span class="keyword">if</span> (s_random == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                s_random = <span class="keyword">new</span> Random(DateTime.Now.Millisecond);</span><br><span class="line">            &#125;</span><br><span class="line">            pack.tempValue = s_random.Next(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">return</span> pack;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;List&lt;TempPack&gt;&gt; s_tempListContainer = <span class="keyword">new</span> List&lt;List&lt;TempPack&gt;&gt;(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoTest</span>(<span class="params"><span class="keyword">int</span> tempCount</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        FillTestData(tempCount);</span><br><span class="line">        DoTestLambda();</span><br><span class="line">        DoTestPassMethod();</span><br><span class="line">        DoTestPassExistPredicate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FillTestData</span>(<span class="params"><span class="keyword">int</span> tempCount</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        s_tempListContainer.Clear();</span><br><span class="line">        s_tempListContainer.Capacity = tempCount;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tempCount; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;TempPack&gt; tempList = <span class="keyword">new</span> List&lt;TempPack&gt;(tempCount);</span><br><span class="line">            s_tempListContainer.Add(tempList);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tempCount; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                tempList.Add(TempPack.CreateTempPack());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoTestLambda</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">""</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">"TestLambda start"</span>);</span><br><span class="line">        Stopwatch stopWatch = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">        stopWatch.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, containerSize = s_tempListContainer.Count; i &lt; containerSize; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;TempPack&gt; tempList = s_tempListContainer[i];</span><br><span class="line">            tempList.Find((existPack) =&gt; existPack.tempValue % <span class="number">5</span> == <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        stopWatch.Stop();</span><br><span class="line">        Console.WriteLine(<span class="string">$"TestLambda end, result_<span class="subst">&#123;stopWatch.ElapsedMilliseconds&#125;</span>ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoTestPassMethod</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">""</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">"PassMethod start"</span>);</span><br><span class="line">        Stopwatch stopWatch = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">        stopWatch.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, containerSize = s_tempListContainer.Count; i &lt; containerSize; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;TempPack&gt; tempList = s_tempListContainer[i];</span><br><span class="line">            tempList.Find(CheckPack);</span><br><span class="line">        &#125;</span><br><span class="line">        stopWatch.Stop();</span><br><span class="line">        Console.WriteLine(<span class="string">$"PassMethod end, result_<span class="subst">&#123;stopWatch.ElapsedMilliseconds&#125;</span>ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DoTestPassExistPredicate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">""</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">"PassExistPredicate start"</span>);</span><br><span class="line">        Stopwatch stopWatch = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">        stopWatch.Start();</span><br><span class="line">        Predicate&lt;TempPack&gt; predicate = <span class="keyword">new</span> Predicate&lt;TempPack&gt;(CheckPack);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, containerSize = s_tempListContainer.Count; i &lt; containerSize; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;TempPack&gt; tempList = s_tempListContainer[i];</span><br><span class="line">            tempList.Find(predicate);</span><br><span class="line">        &#125;</span><br><span class="line">        stopWatch.Stop();</span><br><span class="line">        Console.WriteLine(<span class="string">$"PassExistPredicate end, result_<span class="subst">&#123;stopWatch.ElapsedMilliseconds&#125;</span>ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">CheckPack</span>(<span class="params">TempPack pack</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> pack.tempValue % <span class="number">5</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/2023/05/01/20230501-list-pass-predicate/20230501-pic003.png" class="" title="split">]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
      </tags>
  </entry>
</search>
